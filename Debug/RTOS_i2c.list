
RTOS_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005620  08005620  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005620  08005620  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005620  08005620  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  20000018  08005640  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001034  08005640  00021034  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e041  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025ac  00000000  00000000  0002e081  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  00030630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  000312e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cc52  00000000  00000000  00031e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b22d  00000000  00000000  0003eaaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00048db2  00000000  00000000  00049cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00092a89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd0  00000000  00000000  00092b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005588 	.word	0x08005588

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08005588 	.word	0x08005588

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000034 	.word	0x20000034
 800024c:	20000088 	.word	0x20000088

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b092      	sub	sp, #72	; 0x48
 8000254:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 faab 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f8b9 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f959 	bl	8000514 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000262:	f000 f917 	bl	8000494 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  nr = 1,2,3;
 8000266:	2347      	movs	r3, #71	; 0x47
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	2201      	movs	r2, #1
 800026c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  osMutexDef(mutex);
 800026e:	213c      	movs	r1, #60	; 0x3c
 8000270:	187b      	adds	r3, r7, r1
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2200      	movs	r2, #0
 800027a:	605a      	str	r2, [r3, #4]
  //osMutexDef_t *mutex;
  mutex_id = osMutexCreate(osMutex(mutex));
 800027c:	187b      	adds	r3, r7, r1
 800027e:	0018      	movs	r0, r3
 8000280:	f003 f9cc 	bl	800361c <osMutexCreate>
 8000284:	0002      	movs	r2, r0
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <main+0x84>)
 8000288:	601a      	str	r2, [r3, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(task1, i2c_write, osPriorityNormal, 0, 128);
 800028a:	2120      	movs	r1, #32
 800028c:	187b      	adds	r3, r7, r1
 800028e:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <main+0x88>)
 8000290:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000292:	c331      	stmia	r3!, {r0, r4, r5}
 8000294:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000296:	c331      	stmia	r3!, {r0, r4, r5}
 8000298:	6812      	ldr	r2, [r2, #0]
 800029a:	601a      	str	r2, [r3, #0]
  defaultTaskHandle1 = osThreadCreate(osThread(task1), NULL);
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2100      	movs	r1, #0
 80002a0:	0018      	movs	r0, r3
 80002a2:	f003 f96e 	bl	8003582 <osThreadCreate>
 80002a6:	0002      	movs	r2, r0
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <main+0x8c>)
 80002aa:	601a      	str	r2, [r3, #0]

  osThreadDef(task2, i2c_read, osPriorityNormal, 0, 128);
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <main+0x90>)
 80002b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002b2:	c313      	stmia	r3!, {r0, r1, r4}
 80002b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002b6:	c313      	stmia	r3!, {r0, r1, r4}
 80002b8:	6812      	ldr	r2, [r2, #0]
 80002ba:	601a      	str	r2, [r3, #0]
  defaultTaskHandle2 = osThreadCreate(osThread(task2), NULL);
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2100      	movs	r1, #0
 80002c0:	0018      	movs	r0, r3
 80002c2:	f003 f95e 	bl	8003582 <osThreadCreate>
 80002c6:	0002      	movs	r2, r0
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <main+0x94>)
 80002ca:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002cc:	f003 f951 	bl	8003572 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <main+0x80>
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	2000102c 	.word	0x2000102c
 80002d8:	080055a8 	.word	0x080055a8
 80002dc:	20001028 	.word	0x20001028
 80002e0:	080055cc 	.word	0x080055cc
 80002e4:	20000fd8 	.word	0x20000fd8

080002e8 <i2c_write>:
  /* USER CODE END 3 */
}


void i2c_write()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af02      	add	r7, sp, #8
	while(1)
	{
	osMutexWait(mutex_id, 300);
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <i2c_write+0x64>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	2396      	movs	r3, #150	; 0x96
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	0019      	movs	r1, r3
 80002f8:	0010      	movs	r0, r2
 80002fa:	f003 f9a7 	bl	800364c <osMutexWait>

	 if (HAL_I2C_Mem_Write_IT(&hi2c1, (uint16_t)0xa0, 0x10, 1, data,3)!= HAL_OK)
 80002fe:	4814      	ldr	r0, [pc, #80]	; (8000350 <i2c_write+0x68>)
 8000300:	2303      	movs	r3, #3
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <i2c_write+0x6c>)
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2301      	movs	r3, #1
 800030a:	2210      	movs	r2, #16
 800030c:	21a0      	movs	r1, #160	; 0xa0
 800030e:	f000 fe1d 	bl	8000f4c <HAL_I2C_Mem_Write_IT>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <i2c_write+0x32>
	 {

		 Error_Handler();
 8000316:	f000 f967 	bl	80005e8 <Error_Handler>
	 }
	HAL_Delay(1000);
 800031a:	23fa      	movs	r3, #250	; 0xfa
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	0018      	movs	r0, r3
 8000320:	f000 faaa 	bl	8000878 <HAL_Delay>

	if (HAL_I2C_Mem_Write_IT(&hi2c1, (uint16_t)0xa0, 0x30, 1, data1,3)!= HAL_OK)
 8000324:	480a      	ldr	r0, [pc, #40]	; (8000350 <i2c_write+0x68>)
 8000326:	2303      	movs	r3, #3
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <i2c_write+0x70>)
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2301      	movs	r3, #1
 8000330:	2230      	movs	r2, #48	; 0x30
 8000332:	21a0      	movs	r1, #160	; 0xa0
 8000334:	f000 fe0a 	bl	8000f4c <HAL_I2C_Mem_Write_IT>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <i2c_write+0x58>
	{
		 Error_Handler();
 800033c:	f000 f954 	bl	80005e8 <Error_Handler>
	}

	osMutexRelease(mutex_id);
 8000340:	4b02      	ldr	r3, [pc, #8]	; (800034c <i2c_write+0x64>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	0018      	movs	r0, r3
 8000346:	f003 f9cb 	bl	80036e0 <osMutexRelease>
	osMutexWait(mutex_id, 300);
 800034a:	e7d0      	b.n	80002ee <i2c_write+0x6>
 800034c:	2000102c 	.word	0x2000102c
 8000350:	20000fdc 	.word	0x20000fdc
 8000354:	20000000 	.word	0x20000000
 8000358:	20000004 	.word	0x20000004

0800035c <i2c_read>:
	}

}

void i2c_read()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af02      	add	r7, sp, #8
	while(1)
	{
	osMutexWait(mutex_id, 300);
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <i2c_read+0x64>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	2396      	movs	r3, #150	; 0x96
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	0019      	movs	r1, r3
 800036c:	0010      	movs	r0, r2
 800036e:	f003 f96d 	bl	800364c <osMutexWait>
	if (HAL_I2C_Mem_Read_IT(&hi2c1, (uint16_t)0xa1, 0x10, 1, RX_data,3)!= HAL_OK)
 8000372:	4814      	ldr	r0, [pc, #80]	; (80003c4 <i2c_read+0x68>)
 8000374:	2303      	movs	r3, #3
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <i2c_read+0x6c>)
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	2301      	movs	r3, #1
 800037e:	2210      	movs	r2, #16
 8000380:	21a1      	movs	r1, #161	; 0xa1
 8000382:	f000 fe8b 	bl	800109c <HAL_I2C_Mem_Read_IT>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <i2c_read+0x32>
	{
		 Error_Handler();
 800038a:	f000 f92d 	bl	80005e8 <Error_Handler>
	}
	HAL_Delay(1000);
 800038e:	23fa      	movs	r3, #250	; 0xfa
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	0018      	movs	r0, r3
 8000394:	f000 fa70 	bl	8000878 <HAL_Delay>

	if (HAL_I2C_Mem_Read_IT(&hi2c1, (uint16_t)0xa1, 0x30, 1, RX_data1,3)!= HAL_OK)
 8000398:	480a      	ldr	r0, [pc, #40]	; (80003c4 <i2c_read+0x68>)
 800039a:	2303      	movs	r3, #3
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <i2c_read+0x70>)
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2301      	movs	r3, #1
 80003a4:	2230      	movs	r2, #48	; 0x30
 80003a6:	21a1      	movs	r1, #161	; 0xa1
 80003a8:	f000 fe78 	bl	800109c <HAL_I2C_Mem_Read_IT>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <i2c_read+0x58>
	{
		 Error_Handler();
 80003b0:	f000 f91a 	bl	80005e8 <Error_Handler>
	}
	osMutexRelease(mutex_id);
 80003b4:	4b02      	ldr	r3, [pc, #8]	; (80003c0 <i2c_read+0x64>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	0018      	movs	r0, r3
 80003ba:	f003 f991 	bl	80036e0 <osMutexRelease>
	osMutexWait(mutex_id, 300);
 80003be:	e7d0      	b.n	8000362 <i2c_read+0x6>
 80003c0:	2000102c 	.word	0x2000102c
 80003c4:	20000fdc 	.word	0x20000fdc
 80003c8:	20000288 	.word	0x20000288
 80003cc:	2000028c 	.word	0x2000028c

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b095      	sub	sp, #84	; 0x54
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	2420      	movs	r4, #32
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2330      	movs	r3, #48	; 0x30
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f005 f8c8 	bl	8005576 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	2310      	movs	r3, #16
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	0018      	movs	r0, r3
 80003ec:	2310      	movs	r3, #16
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f005 f8c0 	bl	8005576 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f6:	003b      	movs	r3, r7
 80003f8:	0018      	movs	r0, r3
 80003fa:	2310      	movs	r3, #16
 80003fc:	001a      	movs	r2, r3
 80003fe:	2100      	movs	r1, #0
 8000400:	f005 f8b9 	bl	8005576 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000404:	0021      	movs	r1, r4
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2202      	movs	r2, #2
 800040a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2201      	movs	r2, #1
 8000410:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2210      	movs	r2, #16
 8000416:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2202      	movs	r2, #2
 800041c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	22a0      	movs	r2, #160	; 0xa0
 8000428:	0392      	lsls	r2, r2, #14
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	187b      	adds	r3, r7, r1
 8000434:	0018      	movs	r0, r3
 8000436:	f002 fb59 	bl	8002aec <HAL_RCC_OscConfig>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800043e:	f000 f8d3 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	2110      	movs	r1, #16
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2207      	movs	r2, #7
 8000448:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2202      	movs	r2, #2
 800044e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2101      	movs	r1, #1
 8000460:	0018      	movs	r0, r3
 8000462:	f002 fe5f 	bl	8003124 <HAL_RCC_ClockConfig>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800046a:	f000 f8bd 	bl	80005e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800046e:	003b      	movs	r3, r7
 8000470:	2220      	movs	r2, #32
 8000472:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000474:	003b      	movs	r3, r7
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	f002 ff83 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000486:	f000 f8af 	bl	80005e8 <Error_Handler>
  }
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b015      	add	sp, #84	; 0x54
 8000490:	bd90      	pop	{r4, r7, pc}
	...

08000494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_I2C1_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <MX_I2C1_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_I2C1_Init+0x74>)
 80004a0:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <MX_I2C1_Init+0x7c>)
 80004a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_I2C1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_I2C1_Init+0x74>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <MX_I2C1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_I2C1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <MX_I2C1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_I2C1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_I2C1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_I2C1_Init+0x74>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fca5 	bl	8000e20 <HAL_I2C_Init>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004da:	f000 f885 	bl	80005e8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_I2C1_Init+0x74>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 fa6a 	bl	80029bc <HAL_I2CEx_ConfigAnalogFilter>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004ec:	f000 f87c 	bl	80005e8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <MX_I2C1_Init+0x74>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 faad 	bl	8002a54 <HAL_I2CEx_ConfigDigitalFilter>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f873 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000fdc 	.word	0x20000fdc
 800050c:	40005400 	.word	0x40005400
 8000510:	2000090e 	.word	0x2000090e

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b089      	sub	sp, #36	; 0x24
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	240c      	movs	r4, #12
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f005 f826 	bl	8005576 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <MX_GPIO_Init+0xc8>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <MX_GPIO_Init+0xc8>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0289      	lsls	r1, r1, #10
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <MX_GPIO_Init+0xc8>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	029b      	lsls	r3, r3, #10
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b25      	ldr	r3, [pc, #148]	; (80005dc <MX_GPIO_Init+0xc8>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b24      	ldr	r3, [pc, #144]	; (80005dc <MX_GPIO_Init+0xc8>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0309      	lsls	r1, r1, #12
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_GPIO_Init+0xc8>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	031b      	lsls	r3, r3, #12
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_GPIO_Init+0xc8>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MX_GPIO_Init+0xc8>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	02c9      	lsls	r1, r1, #11
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_GPIO_Init+0xc8>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	02db      	lsls	r3, r3, #11
 8000578:	4013      	ands	r3, r2
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800057e:	23c0      	movs	r3, #192	; 0xc0
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4817      	ldr	r0, [pc, #92]	; (80005e0 <MX_GPIO_Init+0xcc>)
 8000584:	2200      	movs	r2, #0
 8000586:	0019      	movs	r1, r3
 8000588:	f000 fc2c 	bl	8000de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059e:	193a      	adds	r2, r7, r4
 80005a0:	2390      	movs	r3, #144	; 0x90
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 faac 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80005ac:	0021      	movs	r1, r4
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	22c0      	movs	r2, #192	; 0xc0
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <MX_GPIO_Init+0xcc>)
 80005cc:	0019      	movs	r1, r3
 80005ce:	0010      	movs	r0, r2
 80005d0:	f000 fa98 	bl	8000b04 <HAL_GPIO_Init>

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b009      	add	sp, #36	; 0x24
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	48000800 	.word	0x48000800
 80005e4:	10120000 	.word	0x10120000

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_MspInit+0x50>)
 80005fc:	699a      	ldr	r2, [r3, #24]
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_MspInit+0x50>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	619a      	str	r2, [r3, #24]
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x50>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x50>)
 8000614:	69da      	ldr	r2, [r3, #28]
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_MspInit+0x50>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0549      	lsls	r1, r1, #21
 800061c:	430a      	orrs	r2, r1
 800061e:	61da      	str	r2, [r3, #28]
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_MspInit+0x50>)
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	055b      	lsls	r3, r3, #21
 8000628:	4013      	ands	r3, r2
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800062e:	2302      	movs	r3, #2
 8000630:	425b      	negs	r3, r3
 8000632:	2200      	movs	r2, #0
 8000634:	2103      	movs	r1, #3
 8000636:	0018      	movs	r0, r3
 8000638:	f000 f9ec 	bl	8000a14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	2314      	movs	r3, #20
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	0018      	movs	r0, r3
 8000656:	2314      	movs	r3, #20
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f004 ff8b 	bl	8005576 <memset>
  if(hi2c->Instance==I2C1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <HAL_I2C_MspInit+0xa0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d139      	bne.n	80006de <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <HAL_I2C_MspInit+0xa4>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <HAL_I2C_MspInit+0xa4>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	02c9      	lsls	r1, r1, #11
 8000674:	430a      	orrs	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_I2C_MspInit+0xa4>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	02db      	lsls	r3, r3, #11
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000686:	2114      	movs	r1, #20
 8000688:	187b      	adds	r3, r7, r1
 800068a:	22c0      	movs	r2, #192	; 0xc0
 800068c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2212      	movs	r2, #18
 8000692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2201      	movs	r2, #1
 8000698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2203      	movs	r2, #3
 800069e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <HAL_I2C_MspInit+0xa8>)
 80006aa:	0019      	movs	r1, r3
 80006ac:	0010      	movs	r0, r2
 80006ae:	f000 fa29 	bl	8000b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <HAL_I2C_MspInit+0xa4>)
 80006b4:	69da      	ldr	r2, [r3, #28]
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_I2C_MspInit+0xa4>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0389      	lsls	r1, r1, #14
 80006bc:	430a      	orrs	r2, r1
 80006be:	61da      	str	r2, [r3, #28]
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_I2C_MspInit+0xa4>)
 80006c2:	69da      	ldr	r2, [r3, #28]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	039b      	lsls	r3, r3, #14
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2103      	movs	r1, #3
 80006d2:	2017      	movs	r0, #23
 80006d4:	f000 f99e 	bl	8000a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80006d8:	2017      	movs	r0, #23
 80006da:	f000 f9b0 	bl	8000a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b00a      	add	sp, #40	; 0x28
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	40005400 	.word	0x40005400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f89a 	bl	8000840 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800070c:	f004 fa72 	bl	8004bf4 <xTaskGetSchedulerState>
 8000710:	0003      	movs	r3, r0
 8000712:	2b01      	cmp	r3, #1
 8000714:	d001      	beq.n	800071a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000716:	f004 fd1f 	bl	8005158 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <I2C1_IRQHandler+0x2c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	699a      	ldr	r2, [r3, #24]
 800072a:	23e0      	movs	r3, #224	; 0xe0
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	4013      	ands	r3, r2
 8000730:	d004      	beq.n	800073c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <I2C1_IRQHandler+0x2c>)
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fd75 	bl	8001224 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800073a:	e003      	b.n	8000744 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <I2C1_IRQHandler+0x2c>)
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fd56 	bl	80011f0 <HAL_I2C_EV_IRQHandler>
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000fdc 	.word	0x20000fdc

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000762:	490e      	ldr	r1, [pc, #56]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000778:	4c0b      	ldr	r4, [pc, #44]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000786:	f7ff ffe3 	bl	8000750 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800078a:	f004 fec7 	bl	800551c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff fd5f 	bl	8000250 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80007a0:	08005628 	.word	0x08005628
  ldr r2, =_sbss
 80007a4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80007a8:	20001034 	.word	0x20001034

080007ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_IRQHandler>
	...

080007b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_Init+0x24>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_Init+0x24>)
 80007ba:	2110      	movs	r1, #16
 80007bc:	430a      	orrs	r2, r1
 80007be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f809 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c6:	f7ff ff15 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_InitTick+0x5c>)
 80007e2:	681c      	ldr	r4, [r3, #0]
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <HAL_InitTick+0x60>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	0019      	movs	r1, r3
 80007ea:	23fa      	movs	r3, #250	; 0xfa
 80007ec:	0098      	lsls	r0, r3, #2
 80007ee:	f7ff fc8b 	bl	8000108 <__udivsi3>
 80007f2:	0003      	movs	r3, r0
 80007f4:	0019      	movs	r1, r3
 80007f6:	0020      	movs	r0, r4
 80007f8:	f7ff fc86 	bl	8000108 <__udivsi3>
 80007fc:	0003      	movs	r3, r0
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f92d 	bl	8000a5e <HAL_SYSTICK_Config>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	e00f      	b.n	800082c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d80b      	bhi.n	800082a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	2301      	movs	r3, #1
 8000816:	425b      	negs	r3, r3
 8000818:	2200      	movs	r2, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f000 f8fa 	bl	8000a14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_InitTick+0x64>)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b003      	add	sp, #12
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	20000008 	.word	0x20000008
 8000838:	20000010 	.word	0x20000010
 800083c:	2000000c 	.word	0x2000000c

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	001a      	movs	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	18d2      	adds	r2, r2, r3
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000010 	.word	0x20000010
 8000860:	20001030 	.word	0x20001030

08000864 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20001030 	.word	0x20001030

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff fff0 	bl	8000864 <HAL_GetTick>
 8000884:	0003      	movs	r3, r0
 8000886:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	d005      	beq.n	800089e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_Delay+0x40>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	001a      	movs	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	189b      	adds	r3, r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	f7ff ffe0 	bl	8000864 <HAL_GetTick>
 80008a4:	0002      	movs	r2, r0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f7      	bhi.n	80008a0 <HAL_Delay+0x28>
  {
  }
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b004      	add	sp, #16
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000010 	.word	0x20000010

080008bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b7f      	cmp	r3, #127	; 0x7f
 80008ce:	d809      	bhi.n	80008e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	001a      	movs	r2, r3
 80008d6:	231f      	movs	r3, #31
 80008d8:	401a      	ands	r2, r3
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_EnableIRQ+0x30>)
 80008dc:	2101      	movs	r1, #1
 80008de:	4091      	lsls	r1, r2
 80008e0:	000a      	movs	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
  }
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	0002      	movs	r2, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b7f      	cmp	r3, #127	; 0x7f
 8000904:	d828      	bhi.n	8000958 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <__NVIC_SetPriority+0xd4>)
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	089b      	lsrs	r3, r3, #2
 8000910:	33c0      	adds	r3, #192	; 0xc0
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	589b      	ldr	r3, [r3, r2]
 8000916:	1dfa      	adds	r2, r7, #7
 8000918:	7812      	ldrb	r2, [r2, #0]
 800091a:	0011      	movs	r1, r2
 800091c:	2203      	movs	r2, #3
 800091e:	400a      	ands	r2, r1
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	21ff      	movs	r1, #255	; 0xff
 8000924:	4091      	lsls	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	43d2      	mvns	r2, r2
 800092a:	401a      	ands	r2, r3
 800092c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	401a      	ands	r2, r3
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0018      	movs	r0, r3
 800093c:	2303      	movs	r3, #3
 800093e:	4003      	ands	r3, r0
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000944:	481f      	ldr	r0, [pc, #124]	; (80009c4 <__NVIC_SetPriority+0xd4>)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b25b      	sxtb	r3, r3
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	33c0      	adds	r3, #192	; 0xc0
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000956:	e031      	b.n	80009bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <__NVIC_SetPriority+0xd8>)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	0019      	movs	r1, r3
 8000960:	230f      	movs	r3, #15
 8000962:	400b      	ands	r3, r1
 8000964:	3b08      	subs	r3, #8
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3306      	adds	r3, #6
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	3304      	adds	r3, #4
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1dfa      	adds	r2, r7, #7
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	0011      	movs	r1, r2
 8000978:	2203      	movs	r2, #3
 800097a:	400a      	ands	r2, r1
 800097c:	00d2      	lsls	r2, r2, #3
 800097e:	21ff      	movs	r1, #255	; 0xff
 8000980:	4091      	lsls	r1, r2
 8000982:	000a      	movs	r2, r1
 8000984:	43d2      	mvns	r2, r2
 8000986:	401a      	ands	r2, r3
 8000988:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	019b      	lsls	r3, r3, #6
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	401a      	ands	r2, r3
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0018      	movs	r0, r3
 8000998:	2303      	movs	r3, #3
 800099a:	4003      	ands	r3, r0
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <__NVIC_SetPriority+0xd8>)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	001c      	movs	r4, r3
 80009a8:	230f      	movs	r3, #15
 80009aa:	4023      	ands	r3, r4
 80009ac:	3b08      	subs	r3, #8
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	430a      	orrs	r2, r1
 80009b2:	3306      	adds	r3, #6
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	18c3      	adds	r3, r0, r3
 80009b8:	3304      	adds	r3, #4
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b003      	add	sp, #12
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <SysTick_Config+0x40>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d901      	bls.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e010      	b.n	8000a04 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <SysTick_Config+0x44>)
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	3a01      	subs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	2301      	movs	r3, #1
 80009ec:	425b      	negs	r3, r3
 80009ee:	2103      	movs	r1, #3
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ff7d 	bl	80008f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SysTick_Config+0x44>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <SysTick_Config+0x44>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	00ffffff 	.word	0x00ffffff
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	210f      	movs	r1, #15
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	1c02      	adds	r2, r0, #0
 8000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff ff5d 	bl	80008f0 <__NVIC_SetPriority>
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b004      	add	sp, #16
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	0002      	movs	r2, r0
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b25b      	sxtb	r3, r3
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ff33 	bl	80008bc <__NVIC_EnableIRQ>
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff ffaf 	bl	80009cc <SysTick_Config>
 8000a6e:	0003      	movs	r3, r0
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a80:	230f      	movs	r3, #15
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2221      	movs	r2, #33	; 0x21
 8000a8c:	5c9b      	ldrb	r3, [r3, r2]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d007      	beq.n	8000aa4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2204      	movs	r2, #4
 8000a98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e028      	b.n	8000af6 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	210e      	movs	r1, #14
 8000ab0:	438a      	bics	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2101      	movs	r1, #1
 8000ac0:	438a      	bics	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000acc:	2101      	movs	r1, #1
 8000ace:	4091      	lsls	r1, r2
 8000ad0:	000a      	movs	r2, r1
 8000ad2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2221      	movs	r2, #33	; 0x21
 8000ad8:	2101      	movs	r1, #1
 8000ada:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d004      	beq.n	8000af6 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	0010      	movs	r0, r2
 8000af4:	4798      	blx	r3
    } 
  }
  return status;
 8000af6:	230f      	movs	r3, #15
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	781b      	ldrb	r3, [r3, #0]
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b004      	add	sp, #16
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b12:	e14f      	b.n	8000db4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	4091      	lsls	r1, r2
 8000b1e:	000a      	movs	r2, r1
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d100      	bne.n	8000b2c <HAL_GPIO_Init+0x28>
 8000b2a:	e140      	b.n	8000dae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x38>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b12      	cmp	r3, #18
 8000b3a:	d123      	bne.n	8000b84 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	08da      	lsrs	r2, r3, #3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3208      	adds	r2, #8
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	58d3      	ldr	r3, [r2, r3]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	4013      	ands	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	220f      	movs	r2, #15
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	691a      	ldr	r2, [r3, #16]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	2107      	movs	r1, #7
 8000b68:	400b      	ands	r3, r1
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	0013      	movs	r3, r2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	08da      	lsrs	r2, r3, #3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3208      	adds	r2, #8
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	6939      	ldr	r1, [r7, #16]
 8000b82:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	409a      	lsls	r2, r3
 8000b92:	0013      	movs	r3, r2
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d00b      	beq.n	8000bd8 <HAL_GPIO_Init+0xd4>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bcc:	2b11      	cmp	r3, #17
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b12      	cmp	r3, #18
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	43da      	mvns	r2, r3
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	2201      	movs	r2, #1
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	055b      	lsls	r3, r3, #21
 8000c72:	4013      	ands	r3, r2
 8000c74:	d100      	bne.n	8000c78 <HAL_GPIO_Init+0x174>
 8000c76:	e09a      	b.n	8000dae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c78:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <HAL_GPIO_Init+0x2c8>)
 8000c7a:	699a      	ldr	r2, [r3, #24]
 8000c7c:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <HAL_GPIO_Init+0x2c8>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	430a      	orrs	r2, r1
 8000c82:	619a      	str	r2, [r3, #24]
 8000c84:	4b51      	ldr	r3, [pc, #324]	; (8000dcc <HAL_GPIO_Init+0x2c8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c90:	4a4f      	ldr	r2, [pc, #316]	; (8000dd0 <HAL_GPIO_Init+0x2cc>)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3302      	adds	r3, #2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	589b      	ldr	r3, [r3, r2]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	2390      	movs	r3, #144	; 0x90
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d013      	beq.n	8000ce6 <HAL_GPIO_Init+0x1e2>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a44      	ldr	r2, [pc, #272]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d00d      	beq.n	8000ce2 <HAL_GPIO_Init+0x1de>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a43      	ldr	r2, [pc, #268]	; (8000dd8 <HAL_GPIO_Init+0x2d4>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d007      	beq.n	8000cde <HAL_GPIO_Init+0x1da>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a42      	ldr	r2, [pc, #264]	; (8000ddc <HAL_GPIO_Init+0x2d8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_GPIO_Init+0x1d6>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x1e4>
 8000cda:	2305      	movs	r3, #5
 8000cdc:	e004      	b.n	8000ce8 <HAL_GPIO_Init+0x1e4>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_Init+0x1e4>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <HAL_GPIO_Init+0x1e4>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	2103      	movs	r1, #3
 8000cec:	400a      	ands	r2, r1
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	4093      	lsls	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf8:	4935      	ldr	r1, [pc, #212]	; (8000dd0 <HAL_GPIO_Init+0x2cc>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	035b      	lsls	r3, r3, #13
 8000d72:	4013      	ands	r3, r2
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	039b      	lsls	r3, r3, #14
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	40da      	lsrs	r2, r3
 8000dbc:	1e13      	subs	r3, r2, #0
 8000dbe:	d000      	beq.n	8000dc2 <HAL_GPIO_Init+0x2be>
 8000dc0:	e6a8      	b.n	8000b14 <HAL_GPIO_Init+0x10>
  } 
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b006      	add	sp, #24
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000c00 	.word	0x48000c00
 8000de0:	40010400 	.word	0x40010400

08000de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	0008      	movs	r0, r1
 8000dee:	0011      	movs	r1, r2
 8000df0:	1cbb      	adds	r3, r7, #2
 8000df2:	1c02      	adds	r2, r0, #0
 8000df4:	801a      	strh	r2, [r3, #0]
 8000df6:	1c7b      	adds	r3, r7, #1
 8000df8:	1c0a      	adds	r2, r1, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dfc:	1c7b      	adds	r3, r7, #1
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e04:	1cbb      	adds	r3, r7, #2
 8000e06:	881a      	ldrh	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e0c:	e003      	b.n	8000e16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e0e:	1cbb      	adds	r3, r7, #2
 8000e10:	881a      	ldrh	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e082      	b.n	8000f38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2241      	movs	r2, #65	; 0x41
 8000e36:	5c9b      	ldrb	r3, [r3, r2]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d107      	bne.n	8000e4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2240      	movs	r2, #64	; 0x40
 8000e42:	2100      	movs	r1, #0
 8000e44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fbfd 	bl	8000648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2241      	movs	r2, #65	; 0x41
 8000e52:	2124      	movs	r1, #36	; 0x24
 8000e54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	438a      	bics	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4934      	ldr	r1, [pc, #208]	; (8000f40 <HAL_I2C_Init+0x120>)
 8000e70:	400a      	ands	r2, r1
 8000e72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4931      	ldr	r1, [pc, #196]	; (8000f44 <HAL_I2C_Init+0x124>)
 8000e80:	400a      	ands	r2, r1
 8000e82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	0209      	lsls	r1, r1, #8
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	e007      	b.n	8000eae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2184      	movs	r1, #132	; 0x84
 8000ea8:	0209      	lsls	r1, r1, #8
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d104      	bne.n	8000ec0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	491f      	ldr	r1, [pc, #124]	; (8000f48 <HAL_I2C_Init+0x128>)
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	491a      	ldr	r1, [pc, #104]	; (8000f44 <HAL_I2C_Init+0x124>)
 8000edc:	400a      	ands	r2, r1
 8000ede:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	0011      	movs	r1, r2
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	021a      	lsls	r2, r3, #8
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69d9      	ldr	r1, [r3, #28]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a1a      	ldr	r2, [r3, #32]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2241      	movs	r2, #65	; 0x41
 8000f24:	2120      	movs	r1, #32
 8000f26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2242      	movs	r2, #66	; 0x42
 8000f32:	2100      	movs	r1, #0
 8000f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	f0ffffff 	.word	0xf0ffffff
 8000f44:	ffff7fff 	.word	0xffff7fff
 8000f48:	02008000 	.word	0x02008000

08000f4c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	000c      	movs	r4, r1
 8000f56:	0010      	movs	r0, r2
 8000f58:	0019      	movs	r1, r3
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	1c22      	adds	r2, r4, #0
 8000f60:	801a      	strh	r2, [r3, #0]
 8000f62:	2308      	movs	r3, #8
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	1c02      	adds	r2, r0, #0
 8000f68:	801a      	strh	r2, [r3, #0]
 8000f6a:	1dbb      	adds	r3, r7, #6
 8000f6c:	1c0a      	adds	r2, r1, #0
 8000f6e:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2241      	movs	r2, #65	; 0x41
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d000      	beq.n	8000f7e <HAL_I2C_Mem_Write_IT+0x32>
 8000f7c:	e085      	b.n	800108a <HAL_I2C_Mem_Write_IT+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <HAL_I2C_Mem_Write_IT+0x42>
 8000f84:	232c      	movs	r3, #44	; 0x2c
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e078      	b.n	800108c <HAL_I2C_Mem_Write_IT+0x140>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	699a      	ldr	r2, [r3, #24]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d101      	bne.n	8000fb2 <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e06c      	b.n	800108c <HAL_I2C_Mem_Write_IT+0x140>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_I2C_Mem_Write_IT+0x74>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e065      	b.n	800108c <HAL_I2C_Mem_Write_IT+0x140>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2240      	movs	r2, #64	; 0x40
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fc8:	f7ff fc4c 	bl	8000864 <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	613b      	str	r3, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2241      	movs	r2, #65	; 0x41
 8000fd4:	2121      	movs	r1, #33	; 0x21
 8000fd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2242      	movs	r2, #66	; 0x42
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	222c      	movs	r2, #44	; 0x2c
 8000ff0:	18ba      	adds	r2, r7, r2
 8000ff2:	8812      	ldrh	r2, [r2, #0]
 8000ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4a26      	ldr	r2, [pc, #152]	; (8001094 <HAL_I2C_Mem_Write_IT+0x148>)
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_I2C_Mem_Write_IT+0x14c>)
 8001000:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001006:	b29b      	uxth	r3, r3
 8001008:	2bff      	cmp	r3, #255	; 0xff
 800100a:	d906      	bls.n	800101a <HAL_I2C_Mem_Write_IT+0xce>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	045b      	lsls	r3, r3, #17
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e007      	b.n	800102a <HAL_I2C_Mem_Write_IT+0xde>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800101e:	b29a      	uxth	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	049b      	lsls	r3, r3, #18
 8001028:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800102a:	1dbb      	adds	r3, r7, #6
 800102c:	881c      	ldrh	r4, [r3, #0]
 800102e:	2308      	movs	r3, #8
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	881a      	ldrh	r2, [r3, #0]
 8001034:	230a      	movs	r3, #10
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	8819      	ldrh	r1, [r3, #0]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	2319      	movs	r3, #25
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	0023      	movs	r3, r4
 8001046:	f000 fde3 	bl	8001c10 <I2C_RequestMemoryWrite>
 800104a:	1e03      	subs	r3, r0, #0
 800104c:	d005      	beq.n	800105a <HAL_I2C_Mem_Write_IT+0x10e>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	2100      	movs	r1, #0
 8001054:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e018      	b.n	800108c <HAL_I2C_Mem_Write_IT+0x140>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800105e:	b2da      	uxtb	r2, r3
 8001060:	697c      	ldr	r4, [r7, #20]
 8001062:	230a      	movs	r3, #10
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	8819      	ldrh	r1, [r3, #0]
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	0023      	movs	r3, r4
 8001070:	f001 fb92 	bl	8002798 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2240      	movs	r2, #64	; 0x40
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2101      	movs	r1, #1
 8001080:	0018      	movs	r0, r3
 8001082:	f001 fbbf 	bl	8002804 <I2C_Enable_IRQ>

    return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_I2C_Mem_Write_IT+0x140>
  }
  else
  {
    return HAL_BUSY;
 800108a:	2302      	movs	r3, #2
  }
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b007      	add	sp, #28
 8001092:	bd90      	pop	{r4, r7, pc}
 8001094:	ffff0000 	.word	0xffff0000
 8001098:	08001399 	.word	0x08001399

0800109c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	000c      	movs	r4, r1
 80010a6:	0010      	movs	r0, r2
 80010a8:	0019      	movs	r1, r3
 80010aa:	230a      	movs	r3, #10
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	1c22      	adds	r2, r4, #0
 80010b0:	801a      	strh	r2, [r3, #0]
 80010b2:	2308      	movs	r3, #8
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	1c02      	adds	r2, r0, #0
 80010b8:	801a      	strh	r2, [r3, #0]
 80010ba:	1dbb      	adds	r3, r7, #6
 80010bc:	1c0a      	adds	r2, r1, #0
 80010be:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2241      	movs	r2, #65	; 0x41
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b20      	cmp	r3, #32
 80010ca:	d000      	beq.n	80010ce <HAL_I2C_Mem_Read_IT+0x32>
 80010cc:	e085      	b.n	80011da <HAL_I2C_Mem_Read_IT+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80010ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_I2C_Mem_Read_IT+0x42>
 80010d4:	232c      	movs	r3, #44	; 0x2c
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d105      	bne.n	80010ea <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e078      	b.n	80011dc <HAL_I2C_Mem_Read_IT+0x140>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699a      	ldr	r2, [r3, #24]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	401a      	ands	r2, r3
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d101      	bne.n	8001102 <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
 80010fe:	2302      	movs	r3, #2
 8001100:	e06c      	b.n	80011dc <HAL_I2C_Mem_Read_IT+0x140>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2240      	movs	r2, #64	; 0x40
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_I2C_Mem_Read_IT+0x74>
 800110c:	2302      	movs	r3, #2
 800110e:	e065      	b.n	80011dc <HAL_I2C_Mem_Read_IT+0x140>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2240      	movs	r2, #64	; 0x40
 8001114:	2101      	movs	r1, #1
 8001116:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001118:	f7ff fba4 	bl	8000864 <HAL_GetTick>
 800111c:	0003      	movs	r3, r0
 800111e:	613b      	str	r3, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2241      	movs	r2, #65	; 0x41
 8001124:	2122      	movs	r1, #34	; 0x22
 8001126:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2242      	movs	r2, #66	; 0x42
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	222c      	movs	r2, #44	; 0x2c
 8001140:	18ba      	adds	r2, r7, r2
 8001142:	8812      	ldrh	r2, [r2, #0]
 8001144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <HAL_I2C_Mem_Read_IT+0x148>)
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <HAL_I2C_Mem_Read_IT+0x14c>)
 8001150:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001156:	b29b      	uxth	r3, r3
 8001158:	2bff      	cmp	r3, #255	; 0xff
 800115a:	d906      	bls.n	800116a <HAL_I2C_Mem_Read_IT+0xce>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	045b      	lsls	r3, r3, #17
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	e007      	b.n	800117a <HAL_I2C_Mem_Read_IT+0xde>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800116e:	b29a      	uxth	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	049b      	lsls	r3, r3, #18
 8001178:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800117a:	1dbb      	adds	r3, r7, #6
 800117c:	881c      	ldrh	r4, [r3, #0]
 800117e:	2308      	movs	r3, #8
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	230a      	movs	r3, #10
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	8819      	ldrh	r1, [r3, #0]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2319      	movs	r3, #25
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	0023      	movs	r3, r4
 8001196:	f000 fd9f 	bl	8001cd8 <I2C_RequestMemoryRead>
 800119a:	1e03      	subs	r3, r0, #0
 800119c:	d005      	beq.n	80011aa <HAL_I2C_Mem_Read_IT+0x10e>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2240      	movs	r2, #64	; 0x40
 80011a2:	2100      	movs	r1, #0
 80011a4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e018      	b.n	80011dc <HAL_I2C_Mem_Read_IT+0x140>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	697c      	ldr	r4, [r7, #20]
 80011b2:	230a      	movs	r3, #10
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	8819      	ldrh	r1, [r3, #0]
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_I2C_Mem_Read_IT+0x150>)
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	0023      	movs	r3, r4
 80011c0:	f001 faea 	bl	8002798 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2240      	movs	r2, #64	; 0x40
 80011c8:	2100      	movs	r1, #0
 80011ca:	5499      	strb	r1, [r3, r2]
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2102      	movs	r1, #2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f001 fb17 	bl	8002804 <I2C_Enable_IRQ>

    return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_I2C_Mem_Read_IT+0x140>
  }
  else
  {
    return HAL_BUSY;
 80011da:	2302      	movs	r3, #2
  }
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b007      	add	sp, #28
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	ffff0000 	.word	0xffff0000
 80011e8:	08001399 	.word	0x08001399
 80011ec:	80002400 	.word	0x80002400

080011f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	68f9      	ldr	r1, [r7, #12]
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	4798      	blx	r3
  }
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b004      	add	sp, #16
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	001a      	movs	r2, r3
 8001242:	2301      	movs	r3, #1
 8001244:	4013      	ands	r3, r2
 8001246:	d010      	beq.n	800126a <HAL_I2C_ER_IRQHandler+0x46>
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	001a      	movs	r2, r3
 800124e:	2301      	movs	r3, #1
 8001250:	4013      	ands	r3, r2
 8001252:	d00a      	beq.n	800126a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	2201      	movs	r2, #1
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0052      	lsls	r2, r2, #1
 8001268:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	0a9b      	lsrs	r3, r3, #10
 800126e:	001a      	movs	r2, r3
 8001270:	2301      	movs	r3, #1
 8001272:	4013      	ands	r3, r2
 8001274:	d010      	beq.n	8001298 <HAL_I2C_ER_IRQHandler+0x74>
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	09db      	lsrs	r3, r3, #7
 800127a:	001a      	movs	r2, r3
 800127c:	2301      	movs	r3, #1
 800127e:	4013      	ands	r3, r2
 8001280:	d00a      	beq.n	8001298 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	2208      	movs	r2, #8
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	00d2      	lsls	r2, r2, #3
 8001296:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	0a5b      	lsrs	r3, r3, #9
 800129c:	001a      	movs	r2, r3
 800129e:	2301      	movs	r3, #1
 80012a0:	4013      	ands	r3, r2
 80012a2:	d010      	beq.n	80012c6 <HAL_I2C_ER_IRQHandler+0xa2>
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	09db      	lsrs	r3, r3, #7
 80012a8:	001a      	movs	r2, r3
 80012aa:	2301      	movs	r3, #1
 80012ac:	4013      	ands	r3, r2
 80012ae:	d00a      	beq.n	80012c6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	2202      	movs	r2, #2
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	220b      	movs	r2, #11
 80012d0:	4013      	ands	r3, r2
 80012d2:	d005      	beq.n	80012e0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0011      	movs	r1, r2
 80012da:	0018      	movs	r0, r3
 80012dc:	f001 f85e 	bl	800239c <I2C_ITError>
  }
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b006      	add	sp, #24
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	0008      	movs	r0, r1
 8001332:	0011      	movs	r1, r2
 8001334:	1cfb      	adds	r3, r7, #3
 8001336:	1c02      	adds	r2, r0, #0
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	003b      	movs	r3, r7
 800133c:	1c0a      	adds	r2, r1, #0
 800133e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af02      	add	r7, sp, #8
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2240      	movs	r2, #64	; 0x40
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <I2C_Master_ISR_IT+0x1e>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e12d      	b.n	8001612 <I2C_Master_ISR_IT+0x27a>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2240      	movs	r2, #64	; 0x40
 80013ba:	2101      	movs	r1, #1
 80013bc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	001a      	movs	r2, r3
 80013c4:	2301      	movs	r3, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	d014      	beq.n	80013f4 <I2C_Master_ISR_IT+0x5c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	001a      	movs	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	d00e      	beq.n	80013f4 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2210      	movs	r2, #16
 80013dc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	2204      	movs	r2, #4
 80013e4:	431a      	orrs	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f001 f8a7 	bl	8002540 <I2C_Flush_TXDR>
 80013f2:	e0f7      	b.n	80015e4 <I2C_Master_ISR_IT+0x24c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	001a      	movs	r2, r3
 80013fa:	2301      	movs	r3, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	d023      	beq.n	8001448 <I2C_Master_ISR_IT+0xb0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	001a      	movs	r2, r3
 8001406:	2301      	movs	r3, #1
 8001408:	4013      	ands	r3, r2
 800140a:	d01d      	beq.n	8001448 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2204      	movs	r2, #4
 8001410:	4393      	bics	r3, r2
 8001412:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001430:	3b01      	subs	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143c:	b29b      	uxth	r3, r3
 800143e:	3b01      	subs	r3, #1
 8001440:	b29a      	uxth	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001446:	e0cd      	b.n	80015e4 <I2C_Master_ISR_IT+0x24c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	001a      	movs	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	4013      	ands	r3, r2
 8001452:	d01e      	beq.n	8001492 <I2C_Master_ISR_IT+0xfa>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	001a      	movs	r2, r3
 800145a:	2301      	movs	r3, #1
 800145c:	4013      	ands	r3, r2
 800145e:	d018      	beq.n	8001492 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147a:	3b01      	subs	r3, #1
 800147c:	b29a      	uxth	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001490:	e0a8      	b.n	80015e4 <I2C_Master_ISR_IT+0x24c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	09db      	lsrs	r3, r3, #7
 8001496:	001a      	movs	r2, r3
 8001498:	2301      	movs	r3, #1
 800149a:	4013      	ands	r3, r2
 800149c:	d100      	bne.n	80014a0 <I2C_Master_ISR_IT+0x108>
 800149e:	e06d      	b.n	800157c <I2C_Master_ISR_IT+0x1e4>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	099b      	lsrs	r3, r3, #6
 80014a4:	001a      	movs	r2, r3
 80014a6:	2301      	movs	r3, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <I2C_Master_ISR_IT+0x116>
 80014ac:	e066      	b.n	800157c <I2C_Master_ISR_IT+0x1e4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d04b      	beq.n	8001550 <I2C_Master_ISR_IT+0x1b8>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d147      	bne.n	8001550 <I2C_Master_ISR_IT+0x1b8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	2312      	movs	r3, #18
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	0592      	lsls	r2, r2, #22
 80014ce:	0d92      	lsrs	r2, r2, #22
 80014d0:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2bff      	cmp	r3, #255	; 0xff
 80014da:	d911      	bls.n	8001500 <I2C_Master_ISR_IT+0x168>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	22ff      	movs	r2, #255	; 0xff
 80014e0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	045c      	lsls	r4, r3, #17
 80014ec:	2312      	movs	r3, #18
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	8819      	ldrh	r1, [r3, #0]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	0023      	movs	r3, r4
 80014fa:	f001 f94d 	bl	8002798 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014fe:	e03c      	b.n	800157a <I2C_Master_ISR_IT+0x1e2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	4a43      	ldr	r2, [pc, #268]	; (800161c <I2C_Master_ISR_IT+0x284>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00e      	beq.n	8001532 <I2C_Master_ISR_IT+0x19a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	b2da      	uxtb	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800151e:	2312      	movs	r3, #18
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	8819      	ldrh	r1, [r3, #0]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	2300      	movs	r3, #0
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	0023      	movs	r3, r4
 800152c:	f001 f934 	bl	8002798 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001530:	e023      	b.n	800157a <I2C_Master_ISR_IT+0x1e2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	b2da      	uxtb	r2, r3
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	049c      	lsls	r4, r3, #18
 800153c:	2312      	movs	r3, #18
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	8819      	ldrh	r1, [r3, #0]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	2300      	movs	r3, #0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	0023      	movs	r3, r4
 800154a:	f001 f925 	bl	8002798 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800154e:	e014      	b.n	800157a <I2C_Master_ISR_IT+0x1e2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	049b      	lsls	r3, r3, #18
 800155a:	401a      	ands	r2, r3
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	049b      	lsls	r3, r3, #18
 8001560:	429a      	cmp	r2, r3
 8001562:	d004      	beq.n	800156e <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	0018      	movs	r0, r3
 8001568:	f000 fcbd 	bl	8001ee6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800156c:	e03a      	b.n	80015e4 <I2C_Master_ISR_IT+0x24c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2140      	movs	r1, #64	; 0x40
 8001572:	0018      	movs	r0, r3
 8001574:	f000 ff12 	bl	800239c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001578:	e034      	b.n	80015e4 <I2C_Master_ISR_IT+0x24c>
 800157a:	e033      	b.n	80015e4 <I2C_Master_ISR_IT+0x24c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	099b      	lsrs	r3, r3, #6
 8001580:	001a      	movs	r2, r3
 8001582:	2301      	movs	r3, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d02d      	beq.n	80015e4 <I2C_Master_ISR_IT+0x24c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	099b      	lsrs	r3, r3, #6
 800158c:	001a      	movs	r2, r3
 800158e:	2301      	movs	r3, #1
 8001590:	4013      	ands	r3, r2
 8001592:	d027      	beq.n	80015e4 <I2C_Master_ISR_IT+0x24c>
  {
    if (hi2c->XferCount == 0U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d11d      	bne.n	80015da <I2C_Master_ISR_IT+0x242>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	049b      	lsls	r3, r3, #18
 80015a8:	401a      	ands	r2, r3
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	049b      	lsls	r3, r3, #18
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d018      	beq.n	80015e4 <I2C_Master_ISR_IT+0x24c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	4a19      	ldr	r2, [pc, #100]	; (800161c <I2C_Master_ISR_IT+0x284>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d109      	bne.n	80015d0 <I2C_Master_ISR_IT+0x238>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	01c9      	lsls	r1, r1, #7
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	e009      	b.n	80015e4 <I2C_Master_ISR_IT+0x24c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f000 fc87 	bl	8001ee6 <I2C_ITMasterSeqCplt>
 80015d8:	e004      	b.n	80015e4 <I2C_Master_ISR_IT+0x24c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 fedc 	bl	800239c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	001a      	movs	r2, r3
 80015ea:	2301      	movs	r3, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	d00b      	beq.n	8001608 <I2C_Master_ISR_IT+0x270>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	001a      	movs	r2, r3
 80015f6:	2301      	movs	r3, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	d005      	beq.n	8001608 <I2C_Master_ISR_IT+0x270>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	0011      	movs	r1, r2
 8001602:	0018      	movs	r0, r3
 8001604:	f000 fcf2 	bl	8001fec <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	2100      	movs	r1, #0
 800160e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b007      	add	sp, #28
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	ffff0000 	.word	0xffff0000

08001620 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	5c9b      	ldrb	r3, [r3, r2]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <I2C_Slave_ISR_IT+0x24>
 8001640:	2302      	movs	r3, #2
 8001642:	e0fa      	b.n	800183a <I2C_Slave_ISR_IT+0x21a>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	2101      	movs	r1, #1
 800164a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	001a      	movs	r2, r3
 8001652:	2301      	movs	r3, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d00b      	beq.n	8001670 <I2C_Slave_ISR_IT+0x50>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	001a      	movs	r2, r3
 800165e:	2301      	movs	r3, #1
 8001660:	4013      	ands	r3, r2
 8001662:	d005      	beq.n	8001670 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0011      	movs	r1, r2
 800166a:	0018      	movs	r0, r3
 800166c:	f000 fd60 	bl	8002130 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	001a      	movs	r2, r3
 8001676:	2301      	movs	r3, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d054      	beq.n	8001726 <I2C_Slave_ISR_IT+0x106>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	001a      	movs	r2, r3
 8001682:	2301      	movs	r3, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d04e      	beq.n	8001726 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168c:	b29b      	uxth	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d12d      	bne.n	80016ee <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2241      	movs	r2, #65	; 0x41
 8001696:	5c9b      	ldrb	r3, [r3, r2]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b28      	cmp	r3, #40	; 0x28
 800169c:	d10b      	bne.n	80016b6 <I2C_Slave_ISR_IT+0x96>
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	049b      	lsls	r3, r3, #18
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d106      	bne.n	80016b6 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	0011      	movs	r1, r2
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 fe1e 	bl	80022f0 <I2C_ITListenCplt>
 80016b4:	e036      	b.n	8001724 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2241      	movs	r2, #65	; 0x41
 80016ba:	5c9b      	ldrb	r3, [r3, r2]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b29      	cmp	r3, #41	; 0x29
 80016c0:	d110      	bne.n	80016e4 <I2C_Slave_ISR_IT+0xc4>
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	4a5f      	ldr	r2, [pc, #380]	; (8001844 <I2C_Slave_ISR_IT+0x224>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00c      	beq.n	80016e4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2210      	movs	r2, #16
 80016d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 ff33 	bl	8002540 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 fc43 	bl	8001f68 <I2C_ITSlaveSeqCplt>
 80016e2:	e01f      	b.n	8001724 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2210      	movs	r2, #16
 80016ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80016ec:	e09d      	b.n	800182a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2210      	movs	r2, #16
 80016f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	2204      	movs	r2, #4
 80016fc:	431a      	orrs	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <I2C_Slave_ISR_IT+0xf4>
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	045b      	lsls	r3, r3, #17
 800170e:	429a      	cmp	r2, r3
 8001710:	d000      	beq.n	8001714 <I2C_Slave_ISR_IT+0xf4>
 8001712:	e08a      	b.n	800182a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f000 fe3d 	bl	800239c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001722:	e082      	b.n	800182a <I2C_Slave_ISR_IT+0x20a>
 8001724:	e081      	b.n	800182a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	001a      	movs	r2, r3
 800172c:	2301      	movs	r3, #1
 800172e:	4013      	ands	r3, r2
 8001730:	d031      	beq.n	8001796 <I2C_Slave_ISR_IT+0x176>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	001a      	movs	r2, r3
 8001738:	2301      	movs	r3, #1
 800173a:	4013      	ands	r3, r2
 800173c:	d02b      	beq.n	8001796 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d018      	beq.n	800177a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001770:	b29b      	uxth	r3, r3
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d154      	bne.n	800182e <I2C_Slave_ISR_IT+0x20e>
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <I2C_Slave_ISR_IT+0x224>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d050      	beq.n	800182e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	0018      	movs	r0, r3
 8001790:	f000 fbea 	bl	8001f68 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001794:	e04b      	b.n	800182e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	001a      	movs	r2, r3
 800179c:	2301      	movs	r3, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	d00c      	beq.n	80017bc <I2C_Slave_ISR_IT+0x19c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	001a      	movs	r2, r3
 80017a8:	2301      	movs	r3, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	d006      	beq.n	80017bc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 faf1 	bl	8001d9c <I2C_ITAddrCplt>
 80017ba:	e039      	b.n	8001830 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	085b      	lsrs	r3, r3, #1
 80017c0:	001a      	movs	r2, r3
 80017c2:	2301      	movs	r3, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	d033      	beq.n	8001830 <I2C_Slave_ISR_IT+0x210>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	001a      	movs	r2, r3
 80017ce:	2301      	movs	r3, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	d02d      	beq.n	8001830 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d018      	beq.n	8001810 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	851a      	strh	r2, [r3, #40]	; 0x28
 800180e:	e00f      	b.n	8001830 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	045b      	lsls	r3, r3, #17
 8001816:	429a      	cmp	r2, r3
 8001818:	d002      	beq.n	8001820 <I2C_Slave_ISR_IT+0x200>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d107      	bne.n	8001830 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fba0 	bl	8001f68 <I2C_ITSlaveSeqCplt>
 8001828:	e002      	b.n	8001830 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	e000      	b.n	8001830 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800182e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	0018      	movs	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	b006      	add	sp, #24
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	ffff0000 	.word	0xffff0000

08001848 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2240      	movs	r2, #64	; 0x40
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <I2C_Master_ISR_DMA+0x1a>
 800185e:	2302      	movs	r3, #2
 8001860:	e0f7      	b.n	8001a52 <I2C_Master_ISR_DMA+0x20a>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	001a      	movs	r2, r3
 8001870:	2301      	movs	r3, #1
 8001872:	4013      	ands	r3, r2
 8001874:	d019      	beq.n	80018aa <I2C_Master_ISR_DMA+0x62>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	001a      	movs	r2, r3
 800187c:	2301      	movs	r3, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d013      	beq.n	80018aa <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2210      	movs	r2, #16
 8001888:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	2204      	movs	r2, #4
 8001890:	431a      	orrs	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2112      	movs	r1, #18
 800189a:	0018      	movs	r0, r3
 800189c:	f000 ffb2 	bl	8002804 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 fe4c 	bl	8002540 <I2C_Flush_TXDR>
 80018a8:	e0ce      	b.n	8001a48 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	09db      	lsrs	r3, r3, #7
 80018ae:	001a      	movs	r2, r3
 80018b0:	2301      	movs	r3, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	d100      	bne.n	80018b8 <I2C_Master_ISR_DMA+0x70>
 80018b6:	e07e      	b.n	80019b6 <I2C_Master_ISR_DMA+0x16e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	099b      	lsrs	r3, r3, #6
 80018bc:	001a      	movs	r2, r3
 80018be:	2301      	movs	r3, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	d100      	bne.n	80018c6 <I2C_Master_ISR_DMA+0x7e>
 80018c4:	e077      	b.n	80019b6 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2140      	movs	r1, #64	; 0x40
 80018d2:	438a      	bics	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d055      	beq.n	800198c <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	2312      	movs	r3, #18
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	0592      	lsls	r2, r2, #22
 80018ee:	0d92      	lsrs	r2, r2, #22
 80018f0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2bff      	cmp	r3, #255	; 0xff
 80018fa:	d906      	bls.n	800190a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	22ff      	movs	r2, #255	; 0xff
 8001900:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	045b      	lsls	r3, r3, #17
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e010      	b.n	800192c <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <I2C_Master_ISR_DMA+0x214>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d003      	beq.n	8001926 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e002      	b.n	800192c <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	049b      	lsls	r3, r3, #18
 800192a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	b2da      	uxtb	r2, r3
 8001932:	697c      	ldr	r4, [r7, #20]
 8001934:	2312      	movs	r3, #18
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	8819      	ldrh	r1, [r3, #0]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	2300      	movs	r3, #0
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	0023      	movs	r3, r4
 8001942:	f000 ff29 	bl	8002798 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2241      	movs	r2, #65	; 0x41
 800195c:	5c9b      	ldrb	r3, [r3, r2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b22      	cmp	r3, #34	; 0x22
 8001962:	d109      	bne.n	8001978 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	0209      	lsls	r1, r1, #8
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001976:	e067      	b.n	8001a48 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	01c9      	lsls	r1, r1, #7
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800198a:	e05d      	b.n	8001a48 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	049b      	lsls	r3, r3, #18
 8001996:	401a      	ands	r2, r3
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	049b      	lsls	r3, r3, #18
 800199c:	429a      	cmp	r2, r3
 800199e:	d004      	beq.n	80019aa <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 fa9f 	bl	8001ee6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80019a8:	e04e      	b.n	8001a48 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2140      	movs	r1, #64	; 0x40
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 fcf4 	bl	800239c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80019b4:	e048      	b.n	8001a48 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	001a      	movs	r2, r3
 80019bc:	2301      	movs	r3, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	d02e      	beq.n	8001a20 <I2C_Master_ISR_DMA+0x1d8>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	001a      	movs	r2, r3
 80019c8:	2301      	movs	r3, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	d028      	beq.n	8001a20 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11d      	bne.n	8001a14 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	049b      	lsls	r3, r3, #18
 80019e2:	401a      	ands	r2, r3
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	049b      	lsls	r3, r3, #18
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d02c      	beq.n	8001a46 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <I2C_Master_ISR_DMA+0x214>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d109      	bne.n	8001a0a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	01c9      	lsls	r1, r1, #7
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001a08:	e01d      	b.n	8001a46 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f000 fa6a 	bl	8001ee6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001a12:	e018      	b.n	8001a46 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2140      	movs	r1, #64	; 0x40
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 fcbf 	bl	800239c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a1e:	e012      	b.n	8001a46 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	001a      	movs	r2, r3
 8001a26:	2301      	movs	r3, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d00d      	beq.n	8001a48 <I2C_Master_ISR_DMA+0x200>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	001a      	movs	r2, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	d007      	beq.n	8001a48 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 fad4 	bl	8001fec <I2C_ITMasterCplt>
 8001a44:	e000      	b.n	8001a48 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8001a46:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2240      	movs	r2, #64	; 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b007      	add	sp, #28
 8001a58:	bd90      	pop	{r4, r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	ffff0000 	.word	0xffff0000

08001a60 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2240      	movs	r2, #64	; 0x40
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <I2C_Slave_ISR_DMA+0x24>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0be      	b.n	8001c02 <I2C_Slave_ISR_DMA+0x1a2>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	2101      	movs	r1, #1
 8001a8a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	001a      	movs	r2, r3
 8001a92:	2301      	movs	r3, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	d00b      	beq.n	8001ab0 <I2C_Slave_ISR_DMA+0x50>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d005      	beq.n	8001ab0 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 fb40 	bl	8002130 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d100      	bne.n	8001abe <I2C_Slave_ISR_DMA+0x5e>
 8001abc:	e08a      	b.n	8001bd4 <I2C_Slave_ISR_DMA+0x174>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d100      	bne.n	8001acc <I2C_Slave_ISR_DMA+0x6c>
 8001aca:	e083      	b.n	8001bd4 <I2C_Slave_ISR_DMA+0x174>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	0b9b      	lsrs	r3, r3, #14
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d106      	bne.n	8001ae6 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0bdb      	lsrs	r3, r3, #15
 8001adc:	001a      	movs	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001ae2:	d100      	bne.n	8001ae6 <I2C_Slave_ISR_DMA+0x86>
 8001ae4:	e06f      	b.n	8001bc6 <I2C_Slave_ISR_DMA+0x166>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0bdb      	lsrs	r3, r3, #15
 8001af2:	001a      	movs	r2, r3
 8001af4:	2301      	movs	r3, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	d007      	beq.n	8001b0a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8001b06:	2301      	movs	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00d      	beq.n	8001b2e <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	0b9b      	lsrs	r3, r3, #14
 8001b16:	001a      	movs	r2, r3
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d12d      	bne.n	8001b90 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2241      	movs	r2, #65	; 0x41
 8001b38:	5c9b      	ldrb	r3, [r3, r2]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b28      	cmp	r3, #40	; 0x28
 8001b3e:	d10b      	bne.n	8001b58 <I2C_Slave_ISR_DMA+0xf8>
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	049b      	lsls	r3, r3, #18
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d106      	bne.n	8001b58 <I2C_Slave_ISR_DMA+0xf8>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	0011      	movs	r1, r2
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 fbcd 	bl	80022f0 <I2C_ITListenCplt>
 8001b56:	e035      	b.n	8001bc4 <I2C_Slave_ISR_DMA+0x164>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2241      	movs	r2, #65	; 0x41
 8001b5c:	5c9b      	ldrb	r3, [r3, r2]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b29      	cmp	r3, #41	; 0x29
 8001b62:	d110      	bne.n	8001b86 <I2C_Slave_ISR_DMA+0x126>
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <I2C_Slave_ISR_DMA+0x1ac>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00c      	beq.n	8001b86 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2210      	movs	r2, #16
 8001b72:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f000 fce2 	bl	8002540 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 f9f2 	bl	8001f68 <I2C_ITSlaveSeqCplt>
 8001b84:	e01e      	b.n	8001bc4 <I2C_Slave_ISR_DMA+0x164>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001b8e:	e01f      	b.n	8001bd0 <I2C_Slave_ISR_DMA+0x170>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2210      	movs	r2, #16
 8001b96:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d004      	beq.n	8001bb4 <I2C_Slave_ISR_DMA+0x154>
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	045b      	lsls	r3, r3, #17
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d10d      	bne.n	8001bd0 <I2C_Slave_ISR_DMA+0x170>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	0011      	movs	r1, r2
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 fbed 	bl	800239c <I2C_ITError>
      if (treatdmanack == 1U)
 8001bc2:	e005      	b.n	8001bd0 <I2C_Slave_ISR_DMA+0x170>
 8001bc4:	e004      	b.n	8001bd0 <I2C_Slave_ISR_DMA+0x170>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2210      	movs	r2, #16
 8001bcc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001bce:	e013      	b.n	8001bf8 <I2C_Slave_ISR_DMA+0x198>
      if (treatdmanack == 1U)
 8001bd0:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001bd2:	e011      	b.n	8001bf8 <I2C_Slave_ISR_DMA+0x198>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	001a      	movs	r2, r3
 8001bda:	2301      	movs	r3, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d00b      	beq.n	8001bf8 <I2C_Slave_ISR_DMA+0x198>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	001a      	movs	r2, r3
 8001be6:	2301      	movs	r3, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d005      	beq.n	8001bf8 <I2C_Slave_ISR_DMA+0x198>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	0011      	movs	r1, r2
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f8d2 	bl	8001d9c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b006      	add	sp, #24
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	ffff0000 	.word	0xffff0000

08001c10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	000c      	movs	r4, r1
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	250a      	movs	r5, #10
 8001c20:	197b      	adds	r3, r7, r5
 8001c22:	1c22      	adds	r2, r4, #0
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	2308      	movs	r3, #8
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	1c02      	adds	r2, r0, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	1dbb      	adds	r3, r7, #6
 8001c30:	1c0a      	adds	r2, r1, #0
 8001c32:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c34:	1dbb      	adds	r3, r7, #6
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	045c      	lsls	r4, r3, #17
 8001c3e:	197b      	adds	r3, r7, r5
 8001c40:	8819      	ldrh	r1, [r3, #0]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <I2C_RequestMemoryWrite+0xc4>)
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	0023      	movs	r3, r4
 8001c4a:	f000 fda5 	bl	8002798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 fcfa 	bl	800264e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5a:	1e03      	subs	r3, r0, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e033      	b.n	8001cca <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c62:	1dbb      	adds	r3, r7, #6
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d107      	bne.n	8001c7a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
 8001c78:	e019      	b.n	8001cae <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	6a39      	ldr	r1, [r7, #32]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 fcdb 	bl	800264e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e014      	b.n	8001cca <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cae:	6a3a      	ldr	r2, [r7, #32]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	f000 fc88 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	80002000 	.word	0x80002000

08001cd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	000c      	movs	r4, r1
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	250a      	movs	r5, #10
 8001ce8:	197b      	adds	r3, r7, r5
 8001cea:	1c22      	adds	r2, r4, #0
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	2308      	movs	r3, #8
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	1c02      	adds	r2, r0, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	1dbb      	adds	r3, r7, #6
 8001cf8:	1c0a      	adds	r2, r1, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001cfc:	1dbb      	adds	r3, r7, #6
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	197b      	adds	r3, r7, r5
 8001d04:	8819      	ldrh	r1, [r3, #0]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <I2C_RequestMemoryRead+0xc0>)
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f000 fd43 	bl	8002798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d14:	6a39      	ldr	r1, [r7, #32]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 fc98 	bl	800264e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d001      	beq.n	8001d26 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e033      	b.n	8001d8e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d26:	1dbb      	adds	r3, r7, #6
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d2e:	2308      	movs	r3, #8
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d3c:	e019      	b.n	8001d72 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d3e:	2308      	movs	r3, #8
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d52:	6a39      	ldr	r1, [r7, #32]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 fc79 	bl	800264e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d001      	beq.n	8001d64 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e014      	b.n	8001d8e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d64:	2308      	movs	r3, #8
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d72:	6a3a      	ldr	r2, [r7, #32]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	f000 fc26 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	80002000 	.word	0x80002000

08001d9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2241      	movs	r2, #65	; 0x41
 8001daa:	5c9b      	ldrb	r3, [r3, r2]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	001a      	movs	r2, r3
 8001db0:	2328      	movs	r3, #40	; 0x28
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b28      	cmp	r3, #40	; 0x28
 8001db6:	d000      	beq.n	8001dba <I2C_ITAddrCplt+0x1e>
 8001db8:	e089      	b.n	8001ece <I2C_ITAddrCplt+0x132>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2101      	movs	r1, #1
 8001dca:	400a      	ands	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	230c      	movs	r3, #12
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	21fe      	movs	r1, #254	; 0xfe
 8001dde:	400a      	ands	r2, r1
 8001de0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	230a      	movs	r3, #10
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	0592      	lsls	r2, r2, #22
 8001df0:	0d92      	lsrs	r2, r2, #22
 8001df2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	21fe      	movs	r1, #254	; 0xfe
 8001e02:	400a      	ands	r2, r1
 8001e04:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d14b      	bne.n	8001ea6 <I2C_ITAddrCplt+0x10a>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001e0e:	230a      	movs	r3, #10
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	09db      	lsrs	r3, r3, #7
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	230c      	movs	r3, #12
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	4053      	eors	r3, r2
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	001a      	movs	r2, r3
 8001e24:	2306      	movs	r3, #6
 8001e26:	4013      	ands	r3, r2
 8001e28:	d124      	bne.n	8001e74 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	220a      	movs	r2, #10
 8001e30:	18ba      	adds	r2, r7, r2
 8001e32:	8812      	ldrh	r2, [r2, #0]
 8001e34:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d14a      	bne.n	8001ede <I2C_ITAddrCplt+0x142>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2208      	movs	r2, #8
 8001e54:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2240      	movs	r2, #64	; 0x40
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e5e:	230c      	movs	r3, #12
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	230f      	movs	r3, #15
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	7819      	ldrb	r1, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fa5b 	bl	8001328 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001e72:	e034      	b.n	8001ede <I2C_ITAddrCplt+0x142>
        slaveaddrcode = ownadd2code;
 8001e74:	240c      	movs	r4, #12
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	2208      	movs	r2, #8
 8001e7a:	18ba      	adds	r2, r7, r2
 8001e7c:	8812      	ldrh	r2, [r2, #0]
 8001e7e:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2104      	movs	r1, #4
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 fd2f 	bl	80028e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2240      	movs	r2, #64	; 0x40
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	881a      	ldrh	r2, [r3, #0]
 8001e96:	230f      	movs	r3, #15
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	7819      	ldrb	r1, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7ff fa42 	bl	8001328 <HAL_I2C_AddrCallback>
}
 8001ea4:	e01b      	b.n	8001ede <I2C_ITAddrCplt+0x142>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f000 fd1c 	bl	80028e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001eb8:	230c      	movs	r3, #12
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	881a      	ldrh	r2, [r3, #0]
 8001ebe:	230f      	movs	r3, #15
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	7819      	ldrb	r1, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f7ff fa2e 	bl	8001328 <HAL_I2C_AddrCallback>
}
 8001ecc:	e007      	b.n	8001ede <I2C_ITAddrCplt+0x142>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2240      	movs	r2, #64	; 0x40
 8001eda:	2100      	movs	r1, #0
 8001edc:	5499      	strb	r1, [r3, r2]
}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b005      	add	sp, #20
 8001ee4:	bd90      	pop	{r4, r7, pc}

08001ee6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2242      	movs	r2, #66	; 0x42
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2241      	movs	r2, #65	; 0x41
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b21      	cmp	r3, #33	; 0x21
 8001f00:	d117      	bne.n	8001f32 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2241      	movs	r2, #65	; 0x41
 8001f06:	2120      	movs	r1, #32
 8001f08:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2211      	movs	r2, #17
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fce4 	bl	80028e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f7ff f9dc 	bl	80012e8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f30:	e016      	b.n	8001f60 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2241      	movs	r2, #65	; 0x41
 8001f36:	2120      	movs	r1, #32
 8001f38:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2212      	movs	r2, #18
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2102      	movs	r1, #2
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 fccc 	bl	80028e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	2100      	movs	r1, #0
 8001f56:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff f9cc 	bl	80012f8 <HAL_I2C_MasterRxCpltCallback>
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2242      	movs	r2, #66	; 0x42
 8001f74:	2100      	movs	r1, #0
 8001f76:	5499      	strb	r1, [r3, r2]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2241      	movs	r2, #65	; 0x41
 8001f7c:	5c9b      	ldrb	r3, [r3, r2]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b29      	cmp	r3, #41	; 0x29
 8001f82:	d114      	bne.n	8001fae <I2C_ITSlaveSeqCplt+0x46>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2241      	movs	r2, #65	; 0x41
 8001f88:	2128      	movs	r1, #40	; 0x28
 8001f8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2221      	movs	r2, #33	; 0x21
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2101      	movs	r1, #1
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fca6 	bl	80028e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff f9ae 	bl	8001308 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001fac:	e019      	b.n	8001fe2 <I2C_ITSlaveSeqCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2241      	movs	r2, #65	; 0x41
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8001fb8:	d113      	bne.n	8001fe2 <I2C_ITSlaveSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2241      	movs	r2, #65	; 0x41
 8001fbe:	2128      	movs	r1, #40	; 0x28
 8001fc0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2222      	movs	r2, #34	; 0x22
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2102      	movs	r1, #2
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 fc8b 	bl	80028e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff f99b 	bl	8001318 <HAL_I2C_SlaveRxCpltCallback>
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4947      	ldr	r1, [pc, #284]	; (8002128 <I2C_ITMasterCplt+0x13c>)
 800200a:	400a      	ands	r2, r1
 800200c:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a43      	ldr	r2, [pc, #268]	; (800212c <I2C_ITMasterCplt+0x140>)
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	001a      	movs	r2, r3
 8002026:	2301      	movs	r3, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d009      	beq.n	8002040 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2210      	movs	r2, #16
 8002032:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	2204      	movs	r2, #4
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	0018      	movs	r0, r3
 8002044:	f000 fa7c 	bl	8002540 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2103      	movs	r1, #3
 800204c:	0018      	movs	r0, r3
 800204e:	f000 fc4b 	bl	80028e8 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2241      	movs	r2, #65	; 0x41
 800205c:	5c9b      	ldrb	r3, [r3, r2]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b60      	cmp	r3, #96	; 0x60
 8002062:	d002      	beq.n	800206a <I2C_ITMasterCplt+0x7e>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <I2C_ITMasterCplt+0x8e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0011      	movs	r1, r2
 8002072:	0018      	movs	r0, r3
 8002074:	f000 f992 	bl	800239c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002078:	e052      	b.n	8002120 <I2C_ITMasterCplt+0x134>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2241      	movs	r2, #65	; 0x41
 800207e:	5c9b      	ldrb	r3, [r3, r2]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b21      	cmp	r3, #33	; 0x21
 8002084:	d123      	bne.n	80020ce <I2C_ITMasterCplt+0xe2>
    hi2c->State = HAL_I2C_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2241      	movs	r2, #65	; 0x41
 800208a:	2120      	movs	r1, #32
 800208c:	5499      	strb	r1, [r3, r2]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2242      	movs	r2, #66	; 0x42
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d10c      	bne.n	80020b4 <I2C_ITMasterCplt+0xc8>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2242      	movs	r2, #66	; 0x42
 800209e:	2100      	movs	r1, #0
 80020a0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff f953 	bl	8001358 <HAL_I2C_MemTxCpltCallback>
}
 80020b2:	e035      	b.n	8002120 <I2C_ITMasterCplt+0x134>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2242      	movs	r2, #66	; 0x42
 80020b8:	2100      	movs	r1, #0
 80020ba:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff f90e 	bl	80012e8 <HAL_I2C_MasterTxCpltCallback>
}
 80020cc:	e028      	b.n	8002120 <I2C_ITMasterCplt+0x134>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2241      	movs	r2, #65	; 0x41
 80020d2:	5c9b      	ldrb	r3, [r3, r2]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b22      	cmp	r3, #34	; 0x22
 80020d8:	d122      	bne.n	8002120 <I2C_ITMasterCplt+0x134>
    hi2c->State = HAL_I2C_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2241      	movs	r2, #65	; 0x41
 80020de:	2120      	movs	r1, #32
 80020e0:	5499      	strb	r1, [r3, r2]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2242      	movs	r2, #66	; 0x42
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d10c      	bne.n	8002108 <I2C_ITMasterCplt+0x11c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2242      	movs	r2, #66	; 0x42
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2240      	movs	r2, #64	; 0x40
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff f931 	bl	8001368 <HAL_I2C_MemRxCpltCallback>
}
 8002106:	e00b      	b.n	8002120 <I2C_ITMasterCplt+0x134>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2242      	movs	r2, #66	; 0x42
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2240      	movs	r2, #64	; 0x40
 8002114:	2100      	movs	r1, #0
 8002116:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff f8ec 	bl	80012f8 <HAL_I2C_MasterRxCpltCallback>
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}
 8002128:	fe00e800 	.word	0xfe00e800
 800212c:	ffff0000 	.word	0xffff0000

08002130 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2220      	movs	r2, #32
 800214c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2107      	movs	r1, #7
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fbc8 	bl	80028e8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	0209      	lsls	r1, r1, #8
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	495c      	ldr	r1, [pc, #368]	; (80022e8 <I2C_ITSlaveCplt+0x1b8>)
 8002176:	400a      	ands	r2, r1
 8002178:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 f9df 	bl	8002540 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	0b9b      	lsrs	r3, r3, #14
 8002186:	001a      	movs	r2, r3
 8002188:	2301      	movs	r3, #1
 800218a:	4013      	ands	r3, r2
 800218c:	d00b      	beq.n	80021a6 <I2C_ITSlaveCplt+0x76>
  {
    if (hi2c->hdmatx != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002192:	2b00      	cmp	r3, #0
 8002194:	d018      	beq.n	80021c8 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021a4:	e010      	b.n	80021c8 <I2C_ITSlaveCplt+0x98>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	0bdb      	lsrs	r3, r3, #15
 80021aa:	001a      	movs	r2, r3
 80021ac:	2301      	movs	r3, #1
 80021ae:	4013      	ands	r3, r2
 80021b0:	d00a      	beq.n	80021c8 <I2C_ITSlaveCplt+0x98>
  {
    if (hi2c->hdmarx != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	001a      	movs	r2, r3
 80021ce:	2301      	movs	r3, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	d020      	beq.n	8002216 <I2C_ITSlaveCplt+0xe6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2204      	movs	r2, #4
 80021d8:	4393      	bics	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <I2C_ITSlaveCplt+0xe6>
    {
      hi2c->XferSize--;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <I2C_ITSlaveCplt+0xfc>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	2204      	movs	r2, #4
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2242      	movs	r2, #66	; 0x42
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <I2C_ITSlaveCplt+0x140>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0011      	movs	r1, r2
 8002250:	0018      	movs	r0, r3
 8002252:	f000 f8a3 	bl	800239c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2241      	movs	r2, #65	; 0x41
 800225a:	5c9b      	ldrb	r3, [r3, r2]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b28      	cmp	r3, #40	; 0x28
 8002260:	d13e      	bne.n	80022e0 <I2C_ITSlaveCplt+0x1b0>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0011      	movs	r1, r2
 8002268:	0018      	movs	r0, r3
 800226a:	f000 f841 	bl	80022f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800226e:	e037      	b.n	80022e0 <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <I2C_ITSlaveCplt+0x1bc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <I2C_ITSlaveCplt+0x172>
    I2C_ITSlaveSeqCplt(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff fe73 	bl	8001f68 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <I2C_ITSlaveCplt+0x1bc>)
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2241      	movs	r2, #65	; 0x41
 800228c:	2120      	movs	r1, #32
 800228e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	2100      	movs	r1, #0
 8002296:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f7ff f854 	bl	8001348 <HAL_I2C_ListenCpltCallback>
}
 80022a0:	e01e      	b.n	80022e0 <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	; 0x41
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b22      	cmp	r3, #34	; 0x22
 80022ac:	d10c      	bne.n	80022c8 <I2C_ITSlaveCplt+0x198>
    hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2241      	movs	r2, #65	; 0x41
 80022b2:	2120      	movs	r1, #32
 80022b4:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2240      	movs	r2, #64	; 0x40
 80022ba:	2100      	movs	r1, #0
 80022bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7ff f829 	bl	8001318 <HAL_I2C_SlaveRxCpltCallback>
}
 80022c6:	e00b      	b.n	80022e0 <I2C_ITSlaveCplt+0x1b0>
    hi2c->State = HAL_I2C_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2241      	movs	r2, #65	; 0x41
 80022cc:	2120      	movs	r1, #32
 80022ce:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	0018      	movs	r0, r3
 80022dc:	f7ff f814 	bl	8001308 <HAL_I2C_SlaveTxCpltCallback>
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b004      	add	sp, #16
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	fe00e800 	.word	0xfe00e800
 80022ec:	ffff0000 	.word	0xffff0000

080022f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <I2C_ITListenCplt+0xa8>)
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2241      	movs	r2, #65	; 0x41
 800230a:	2120      	movs	r1, #32
 800230c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2242      	movs	r2, #66	; 0x42
 8002312:	2100      	movs	r1, #0
 8002314:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	001a      	movs	r2, r3
 8002322:	2301      	movs	r3, #1
 8002324:	4013      	ands	r3, r2
 8002326:	d022      	beq.n	800236e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	2204      	movs	r2, #4
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2107      	movs	r1, #7
 8002372:	0018      	movs	r0, r3
 8002374:	f000 fab8 	bl	80028e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2210      	movs	r2, #16
 800237e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	2100      	movs	r1, #0
 8002386:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f7fe ffdc 	bl	8001348 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}
 8002398:	ffff0000 	.word	0xffff0000

0800239c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023a6:	200f      	movs	r0, #15
 80023a8:	183b      	adds	r3, r7, r0
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	2141      	movs	r1, #65	; 0x41
 80023ae:	5c52      	ldrb	r2, [r2, r1]
 80023b0:	701a      	strb	r2, [r3, #0]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2242      	movs	r2, #66	; 0x42
 80023b6:	2100      	movs	r1, #0
 80023b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a5b      	ldr	r2, [pc, #364]	; (800252c <I2C_ITError+0x190>)
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80023d2:	183b      	adds	r3, r7, r0
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b28      	cmp	r3, #40	; 0x28
 80023d8:	d009      	beq.n	80023ee <I2C_ITError+0x52>
 80023da:	230f      	movs	r3, #15
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b29      	cmp	r3, #41	; 0x29
 80023e2:	d004      	beq.n	80023ee <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80023e4:	230f      	movs	r3, #15
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b2a      	cmp	r3, #42	; 0x2a
 80023ec:	d10f      	bne.n	800240e <I2C_ITError+0x72>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2103      	movs	r1, #3
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fa78 	bl	80028e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2241      	movs	r2, #65	; 0x41
 80023fc:	2128      	movs	r1, #40	; 0x28
 80023fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a49      	ldr	r2, [pc, #292]	; (8002530 <I2C_ITError+0x194>)
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
 800240c:	e014      	b.n	8002438 <I2C_ITError+0x9c>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2107      	movs	r1, #7
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fa68 	bl	80028e8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2241      	movs	r2, #65	; 0x41
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b60      	cmp	r3, #96	; 0x60
 8002422:	d003      	beq.n	800242c <I2C_ITError+0x90>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2241      	movs	r2, #65	; 0x41
 8002428:	2120      	movs	r1, #32
 800242a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	01db      	lsls	r3, r3, #7
 8002442:	401a      	ands	r2, r3
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	01db      	lsls	r3, r3, #7
 8002448:	429a      	cmp	r2, r3
 800244a:	d122      	bne.n	8002492 <I2C_ITError+0xf6>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4937      	ldr	r1, [pc, #220]	; (8002534 <I2C_ITError+0x198>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05e      	beq.n	8002522 <I2C_ITError+0x186>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	4a33      	ldr	r2, [pc, #204]	; (8002538 <I2C_ITError+0x19c>)
 800246a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	0018      	movs	r0, r3
 800247a:	f7fe fafd 	bl	8000a78 <HAL_DMA_Abort_IT>
 800247e:	1e03      	subs	r3, r0, #0
 8002480:	d04f      	beq.n	8002522 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	0018      	movs	r0, r3
 800248e:	4790      	blx	r2
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002490:	e047      	b.n	8002522 <I2C_ITError+0x186>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	401a      	ands	r2, r3
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d122      	bne.n	80024ec <I2C_ITError+0x150>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4922      	ldr	r1, [pc, #136]	; (800253c <I2C_ITError+0x1a0>)
 80024b2:	400a      	ands	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d031      	beq.n	8002522 <I2C_ITError+0x186>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <I2C_ITError+0x19c>)
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2240      	movs	r2, #64	; 0x40
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7fe fad0 	bl	8000a78 <HAL_DMA_Abort_IT>
 80024d8:	1e03      	subs	r3, r0, #0
 80024da:	d022      	beq.n	8002522 <I2C_ITError+0x186>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	0018      	movs	r0, r3
 80024e8:	4790      	blx	r2
}
 80024ea:	e01a      	b.n	8002522 <I2C_ITError+0x186>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2241      	movs	r2, #65	; 0x41
 80024f0:	5c9b      	ldrb	r3, [r3, r2]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b60      	cmp	r3, #96	; 0x60
 80024f6:	d10c      	bne.n	8002512 <I2C_ITError+0x176>
    hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2241      	movs	r2, #65	; 0x41
 80024fc:	2120      	movs	r1, #32
 80024fe:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	2100      	movs	r1, #0
 8002506:	5499      	strb	r1, [r3, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f7fe ff3c 	bl	8001388 <HAL_I2C_AbortCpltCallback>
}
 8002510:	e007      	b.n	8002522 <I2C_ITError+0x186>
    __HAL_UNLOCK(hi2c);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2240      	movs	r2, #64	; 0x40
 8002516:	2100      	movs	r1, #0
 8002518:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	0018      	movs	r0, r3
 800251e:	f7fe ff2b 	bl	8001378 <HAL_I2C_ErrorCallback>
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	ffff0000 	.word	0xffff0000
 8002530:	08001621 	.word	0x08001621
 8002534:	ffffbfff 	.word	0xffffbfff
 8002538:	08002585 	.word	0x08002585
 800253c:	ffff7fff 	.word	0xffff7fff

08002540 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	2b02      	cmp	r3, #2
 8002554:	d103      	bne.n	800255e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	2b01      	cmp	r3, #1
 800256a:	d007      	beq.n	800257c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	619a      	str	r2, [r3, #24]
  }
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	2200      	movs	r2, #0
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	2200      	movs	r2, #0
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2241      	movs	r2, #65	; 0x41
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b60      	cmp	r3, #96	; 0x60
 80025ac:	d108      	bne.n	80025c0 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2241      	movs	r2, #65	; 0x41
 80025b2:	2120      	movs	r1, #32
 80025b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7fe fee5 	bl	8001388 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025be:	e003      	b.n	80025c8 <I2C_DMAAbort+0x44>
    HAL_I2C_ErrorCallback(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7fe fed8 	bl	8001378 <HAL_I2C_ErrorCallback>
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e0:	e021      	b.n	8002626 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	d01e      	beq.n	8002626 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e8:	f7fe f93c 	bl	8000864 <HAL_GetTick>
 80025ec:	0002      	movs	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d302      	bcc.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x2e>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d113      	bne.n	8002626 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	2220      	movs	r2, #32
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2241      	movs	r2, #65	; 0x41
 800260e:	2120      	movs	r1, #32
 8002610:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2242      	movs	r2, #66	; 0x42
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2240      	movs	r2, #64	; 0x40
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00f      	b.n	8002646 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	4013      	ands	r3, r2
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	425a      	negs	r2, r3
 8002636:	4153      	adcs	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	001a      	movs	r2, r3
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d0ce      	beq.n	80025e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b004      	add	sp, #16
 800264c:	bd80      	pop	{r7, pc}

0800264e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800265a:	e02b      	b.n	80026b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	0018      	movs	r0, r3
 8002664:	f000 f832 	bl	80026cc <I2C_IsAcknowledgeFailed>
 8002668:	1e03      	subs	r3, r0, #0
 800266a:	d001      	beq.n	8002670 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e029      	b.n	80026c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3301      	adds	r3, #1
 8002674:	d01e      	beq.n	80026b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7fe f8f5 	bl	8000864 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d113      	bne.n	80026b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	2220      	movs	r2, #32
 8002692:	431a      	orrs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2241      	movs	r2, #65	; 0x41
 800269c:	2120      	movs	r1, #32
 800269e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2242      	movs	r2, #66	; 0x42
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	2100      	movs	r1, #0
 80026ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e007      	b.n	80026c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2202      	movs	r2, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d1cc      	bne.n	800265c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b004      	add	sp, #16
 80026ca:	bd80      	pop	{r7, pc}

080026cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2210      	movs	r2, #16
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d151      	bne.n	800278a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e6:	e021      	b.n	800272c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3301      	adds	r3, #1
 80026ec:	d01e      	beq.n	800272c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7fe f8b9 	bl	8000864 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_IsAcknowledgeFailed+0x38>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d113      	bne.n	800272c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	2220      	movs	r2, #32
 800270a:	431a      	orrs	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2241      	movs	r2, #65	; 0x41
 8002714:	2120      	movs	r1, #32
 8002716:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2242      	movs	r2, #66	; 0x42
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e02f      	b.n	800278c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2220      	movs	r2, #32
 8002734:	4013      	ands	r3, r2
 8002736:	2b20      	cmp	r3, #32
 8002738:	d1d6      	bne.n	80026e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2210      	movs	r2, #16
 8002740:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2220      	movs	r2, #32
 8002748:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff fef7 	bl	8002540 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	490d      	ldr	r1, [pc, #52]	; (8002794 <I2C_IsAcknowledgeFailed+0xc8>)
 800275e:	400a      	ands	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	2204      	movs	r2, #4
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2241      	movs	r2, #65	; 0x41
 8002772:	2120      	movs	r1, #32
 8002774:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2242      	movs	r2, #66	; 0x42
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b004      	add	sp, #16
 8002792:	bd80      	pop	{r7, pc}
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	0008      	movs	r0, r1
 80027a2:	0011      	movs	r1, r2
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	240a      	movs	r4, #10
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	1c02      	adds	r2, r0, #0
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	2009      	movs	r0, #9
 80027b0:	183b      	adds	r3, r7, r0
 80027b2:	1c0a      	adds	r2, r1, #0
 80027b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	6a3a      	ldr	r2, [r7, #32]
 80027be:	0d51      	lsrs	r1, r2, #21
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	00d2      	lsls	r2, r2, #3
 80027c4:	400a      	ands	r2, r1
 80027c6:	490e      	ldr	r1, [pc, #56]	; (8002800 <I2C_TransferConfig+0x68>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	43d2      	mvns	r2, r2
 80027cc:	401a      	ands	r2, r3
 80027ce:	0011      	movs	r1, r2
 80027d0:	193b      	adds	r3, r7, r4
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	059b      	lsls	r3, r3, #22
 80027d6:	0d9a      	lsrs	r2, r3, #22
 80027d8:	183b      	adds	r3, r7, r0
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	0418      	lsls	r0, r3, #16
 80027de:	23ff      	movs	r3, #255	; 0xff
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	4003      	ands	r3, r0
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b005      	add	sp, #20
 80027fc:	bd90      	pop	{r4, r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	03ff63ff 	.word	0x03ff63ff

08002804 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	000a      	movs	r2, r1
 800280e:	1cbb      	adds	r3, r7, #2
 8002810:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <I2C_Enable_IRQ+0xdc>)
 800281c:	429a      	cmp	r2, r3
 800281e:	d004      	beq.n	800282a <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <I2C_Enable_IRQ+0xe0>)
 8002826:	429a      	cmp	r2, r3
 8002828:	d127      	bne.n	800287a <I2C_Enable_IRQ+0x76>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800282a:	1cbb      	adds	r3, r7, #2
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	2204      	movs	r2, #4
 8002830:	4013      	ands	r3, r2
 8002832:	d003      	beq.n	800283c <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	22b8      	movs	r2, #184	; 0xb8
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800283c:	1cbb      	adds	r3, r7, #2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	2211      	movs	r2, #17
 8002842:	4013      	ands	r3, r2
 8002844:	2b11      	cmp	r3, #17
 8002846:	d103      	bne.n	8002850 <I2C_Enable_IRQ+0x4c>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2290      	movs	r2, #144	; 0x90
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002850:	1cbb      	adds	r3, r7, #2
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	2212      	movs	r2, #18
 8002856:	4013      	ands	r3, r2
 8002858:	2b12      	cmp	r3, #18
 800285a:	d103      	bne.n	8002864 <I2C_Enable_IRQ+0x60>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002864:	1cbb      	adds	r3, r7, #2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	2212      	movs	r2, #18
 800286a:	4013      	ands	r3, r2
 800286c:	2b12      	cmp	r3, #18
 800286e:	d12a      	bne.n	80028c6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002878:	e025      	b.n	80028c6 <I2C_Enable_IRQ+0xc2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800287a:	1cbb      	adds	r3, r7, #2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2204      	movs	r2, #4
 8002880:	4013      	ands	r3, r2
 8002882:	d003      	beq.n	800288c <I2C_Enable_IRQ+0x88>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	22b8      	movs	r2, #184	; 0xb8
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800288c:	1cbb      	adds	r3, r7, #2
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	4013      	ands	r3, r2
 8002894:	d003      	beq.n	800289e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	22f2      	movs	r2, #242	; 0xf2
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800289e:	1cbb      	adds	r3, r7, #2
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2202      	movs	r2, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	d004      	beq.n	80028b2 <I2C_Enable_IRQ+0xae>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	22f4      	movs	r2, #244	; 0xf4
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e009      	b.n	80028c6 <I2C_Enable_IRQ+0xc2>
    }

    else if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80028b2:	1cbb      	adds	r3, r7, #2
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	2212      	movs	r2, #18
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b12      	cmp	r3, #18
 80028bc:	d103      	bne.n	80028c6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6819      	ldr	r1, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	08001849 	.word	0x08001849
 80028e4:	08001a61 	.word	0x08001a61

080028e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	000a      	movs	r2, r1
 80028f2:	1cbb      	adds	r3, r7, #2
 80028f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80028fa:	1cbb      	adds	r3, r7, #2
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	2201      	movs	r2, #1
 8002900:	4013      	ands	r3, r2
 8002902:	d010      	beq.n	8002926 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2242      	movs	r2, #66	; 0x42
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2241      	movs	r2, #65	; 0x41
 8002910:	5c9b      	ldrb	r3, [r3, r2]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	001a      	movs	r2, r3
 8002916:	2328      	movs	r3, #40	; 0x28
 8002918:	4013      	ands	r3, r2
 800291a:	2b28      	cmp	r3, #40	; 0x28
 800291c:	d003      	beq.n	8002926 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22b0      	movs	r2, #176	; 0xb0
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002926:	1cbb      	adds	r3, r7, #2
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d010      	beq.n	8002952 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2244      	movs	r2, #68	; 0x44
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2241      	movs	r2, #65	; 0x41
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	001a      	movs	r2, r3
 8002942:	2328      	movs	r3, #40	; 0x28
 8002944:	4013      	ands	r3, r2
 8002946:	2b28      	cmp	r3, #40	; 0x28
 8002948:	d003      	beq.n	8002952 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22b0      	movs	r2, #176	; 0xb0
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002952:	1cbb      	adds	r3, r7, #2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
 800295a:	d003      	beq.n	8002964 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	22b8      	movs	r2, #184	; 0xb8
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002964:	1cbb      	adds	r3, r7, #2
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	2211      	movs	r2, #17
 800296a:	4013      	ands	r3, r2
 800296c:	2b11      	cmp	r3, #17
 800296e:	d103      	bne.n	8002978 <I2C_Disable_IRQ+0x90>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2290      	movs	r2, #144	; 0x90
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002978:	1cbb      	adds	r3, r7, #2
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	2212      	movs	r2, #18
 800297e:	4013      	ands	r3, r2
 8002980:	2b12      	cmp	r3, #18
 8002982:	d103      	bne.n	800298c <I2C_Disable_IRQ+0xa4>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800298c:	1cbb      	adds	r3, r7, #2
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	2212      	movs	r2, #18
 8002992:	4013      	ands	r3, r2
 8002994:	2b12      	cmp	r3, #18
 8002996:	d103      	bne.n	80029a0 <I2C_Disable_IRQ+0xb8>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43d9      	mvns	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	400a      	ands	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b004      	add	sp, #16
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2241      	movs	r2, #65	; 0x41
 80029ca:	5c9b      	ldrb	r3, [r3, r2]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d138      	bne.n	8002a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	5c9b      	ldrb	r3, [r3, r2]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029dc:	2302      	movs	r3, #2
 80029de:	e032      	b.n	8002a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2240      	movs	r2, #64	; 0x40
 80029e4:	2101      	movs	r1, #1
 80029e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2241      	movs	r2, #65	; 0x41
 80029ec:	2124      	movs	r1, #36	; 0x24
 80029ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2101      	movs	r1, #1
 80029fc:	438a      	bics	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4911      	ldr	r1, [pc, #68]	; (8002a50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2241      	movs	r2, #65	; 0x41
 8002a34:	2120      	movs	r1, #32
 8002a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	ffffefff 	.word	0xffffefff

08002a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2241      	movs	r2, #65	; 0x41
 8002a62:	5c9b      	ldrb	r3, [r3, r2]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d139      	bne.n	8002ade <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e033      	b.n	8002ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2241      	movs	r2, #65	; 0x41
 8002a84:	2124      	movs	r1, #36	; 0x24
 8002a86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2101      	movs	r1, #1
 8002a94:	438a      	bics	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2241      	movs	r2, #65	; 0x41
 8002ace:	2120      	movs	r1, #32
 8002ad0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2240      	movs	r2, #64	; 0x40
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
  }
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	fffff0ff 	.word	0xfffff0ff

08002aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e303      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d100      	bne.n	8002b0a <HAL_RCC_OscConfig+0x1e>
 8002b08:	e08d      	b.n	8002c26 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b0a:	4bc4      	ldr	r3, [pc, #784]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	220c      	movs	r2, #12
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d00e      	beq.n	8002b34 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b16:	4bc1      	ldr	r3, [pc, #772]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x64>
 8002b22:	4bbe      	ldr	r3, [pc, #760]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	025b      	lsls	r3, r3, #9
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	025b      	lsls	r3, r3, #9
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	4bb9      	ldr	r3, [pc, #740]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <HAL_RCC_OscConfig+0x56>
 8002b40:	e070      	b.n	8002c24 <HAL_RCC_OscConfig+0x138>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d000      	beq.n	8002b4c <HAL_RCC_OscConfig+0x60>
 8002b4a:	e06b      	b.n	8002c24 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e2da      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <HAL_RCC_OscConfig+0x7c>
 8002b58:	4bb0      	ldr	r3, [pc, #704]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4baf      	ldr	r3, [pc, #700]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0249      	lsls	r1, r1, #9
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e02f      	b.n	8002bc8 <HAL_RCC_OscConfig+0xdc>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x9e>
 8002b70:	4baa      	ldr	r3, [pc, #680]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4ba9      	ldr	r3, [pc, #676]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b76:	49aa      	ldr	r1, [pc, #680]	; (8002e20 <HAL_RCC_OscConfig+0x334>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	4ba7      	ldr	r3, [pc, #668]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4ba6      	ldr	r3, [pc, #664]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b82:	49a8      	ldr	r1, [pc, #672]	; (8002e24 <HAL_RCC_OscConfig+0x338>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e01e      	b.n	8002bc8 <HAL_RCC_OscConfig+0xdc>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d10e      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xc4>
 8002b92:	4ba2      	ldr	r3, [pc, #648]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4ba1      	ldr	r3, [pc, #644]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	02c9      	lsls	r1, r1, #11
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	4b9e      	ldr	r3, [pc, #632]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b9d      	ldr	r3, [pc, #628]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	0249      	lsls	r1, r1, #9
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCC_OscConfig+0xdc>
 8002bb0:	4b9a      	ldr	r3, [pc, #616]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b99      	ldr	r3, [pc, #612]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002bb6:	499a      	ldr	r1, [pc, #616]	; (8002e20 <HAL_RCC_OscConfig+0x334>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	4b97      	ldr	r3, [pc, #604]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b96      	ldr	r3, [pc, #600]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002bc2:	4998      	ldr	r1, [pc, #608]	; (8002e24 <HAL_RCC_OscConfig+0x338>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d014      	beq.n	8002bfa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fd fe48 	bl	8000864 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bda:	f7fd fe43 	bl	8000864 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	; 0x64
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e28c      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bec:	4b8b      	ldr	r3, [pc, #556]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	029b      	lsls	r3, r3, #10
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0xee>
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fd fe33 	bl	8000864 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fd fe2e 	bl	8000864 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e277      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	029b      	lsls	r3, r3, #10
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x118>
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <HAL_RCC_OscConfig+0x146>
 8002c30:	e069      	b.n	8002d06 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c32:	4b7a      	ldr	r3, [pc, #488]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	220c      	movs	r2, #12
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d00b      	beq.n	8002c54 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c3c:	4b77      	ldr	r3, [pc, #476]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	220c      	movs	r2, #12
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d11c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x196>
 8002c48:	4b74      	ldr	r3, [pc, #464]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	025b      	lsls	r3, r3, #9
 8002c50:	4013      	ands	r3, r2
 8002c52:	d116      	bne.n	8002c82 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c54:	4b71      	ldr	r3, [pc, #452]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d005      	beq.n	8002c6a <HAL_RCC_OscConfig+0x17e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e24d      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b6c      	ldr	r3, [pc, #432]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	22f8      	movs	r2, #248	; 0xf8
 8002c70:	4393      	bics	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	00da      	lsls	r2, r3, #3
 8002c7a:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c80:	e041      	b.n	8002d06 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d024      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c8a:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fd fde5 	bl	8000864 <HAL_GetTick>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7fd fde0 	bl	8000864 <HAL_GetTick>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e229      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b5a      	ldr	r3, [pc, #360]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d0f1      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	22f8      	movs	r2, #248	; 0xf8
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00da      	lsls	r2, r3, #3
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e018      	b.n	8002d06 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd4:	4b51      	ldr	r3, [pc, #324]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fdc0 	bl	8000864 <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fd fdbb 	bl	8000864 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e204      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfc:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1f1      	bne.n	8002cea <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d036      	beq.n	8002d7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d019      	beq.n	8002d4c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d18:	4b40      	ldr	r3, [pc, #256]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1c:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	430a      	orrs	r2, r1
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d24:	f7fd fd9e 	bl	8000864 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2e:	f7fd fd99 	bl	8000864 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1e2      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2202      	movs	r2, #2
 8002d46:	4013      	ands	r3, r2
 8002d48:	d0f1      	beq.n	8002d2e <HAL_RCC_OscConfig+0x242>
 8002d4a:	e018      	b.n	8002d7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d50:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002d52:	2101      	movs	r1, #1
 8002d54:	438a      	bics	r2, r1
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7fd fd84 	bl	8000864 <HAL_GetTick>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fd fd7f 	bl	8000864 <HAL_GetTick>
 8002d66:	0002      	movs	r2, r0
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e1c8      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2202      	movs	r2, #2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d1f1      	bne.n	8002d62 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2204      	movs	r2, #4
 8002d84:	4013      	ands	r3, r2
 8002d86:	d100      	bne.n	8002d8a <HAL_RCC_OscConfig+0x29e>
 8002d88:	e0b6      	b.n	8002ef8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	231f      	movs	r3, #31
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	055b      	lsls	r3, r3, #21
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d111      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0549      	lsls	r1, r1, #21
 8002da8:	430a      	orrs	r2, r1
 8002daa:	61da      	str	r2, [r3, #28]
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	055b      	lsls	r3, r3, #21
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dba:	231f      	movs	r3, #31
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_OscConfig+0x33c>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d11a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_RCC_OscConfig+0x33c>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x33c>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0049      	lsls	r1, r1, #1
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ddc:	f7fd fd42 	bl	8000864 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7fd fd3d 	bl	8000864 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e186      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x33c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4013      	ands	r3, r2
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10f      	bne.n	8002e2c <HAL_RCC_OscConfig+0x340>
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <HAL_RCC_OscConfig+0x330>)
 8002e12:	2101      	movs	r1, #1
 8002e14:	430a      	orrs	r2, r1
 8002e16:	621a      	str	r2, [r3, #32]
 8002e18:	e036      	b.n	8002e88 <HAL_RCC_OscConfig+0x39c>
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	fffeffff 	.word	0xfffeffff
 8002e24:	fffbffff 	.word	0xfffbffff
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x362>
 8002e34:	4bb6      	ldr	r3, [pc, #728]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	4bb5      	ldr	r3, [pc, #724]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	621a      	str	r2, [r3, #32]
 8002e40:	4bb3      	ldr	r3, [pc, #716]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	4bb2      	ldr	r3, [pc, #712]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e46:	2104      	movs	r1, #4
 8002e48:	438a      	bics	r2, r1
 8002e4a:	621a      	str	r2, [r3, #32]
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x39c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x384>
 8002e56:	4bae      	ldr	r3, [pc, #696]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	4bad      	ldr	r3, [pc, #692]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	621a      	str	r2, [r3, #32]
 8002e62:	4bab      	ldr	r3, [pc, #684]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e64:	6a1a      	ldr	r2, [r3, #32]
 8002e66:	4baa      	ldr	r3, [pc, #680]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e68:	2101      	movs	r1, #1
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	621a      	str	r2, [r3, #32]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x39c>
 8002e70:	4ba7      	ldr	r3, [pc, #668]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	4ba6      	ldr	r3, [pc, #664]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e76:	2101      	movs	r1, #1
 8002e78:	438a      	bics	r2, r1
 8002e7a:	621a      	str	r2, [r3, #32]
 8002e7c:	4ba4      	ldr	r3, [pc, #656]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	4ba3      	ldr	r3, [pc, #652]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002e82:	2104      	movs	r1, #4
 8002e84:	438a      	bics	r2, r1
 8002e86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d014      	beq.n	8002eba <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e90:	f7fd fce8 	bl	8000864 <HAL_GetTick>
 8002e94:	0003      	movs	r3, r0
 8002e96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	e009      	b.n	8002eae <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fd fce3 	bl	8000864 <HAL_GetTick>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	4a9b      	ldr	r2, [pc, #620]	; (8003114 <HAL_RCC_OscConfig+0x628>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e12b      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b98      	ldr	r3, [pc, #608]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x3ae>
 8002eb8:	e013      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fd fcd3 	bl	8000864 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	e009      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fd fcce 	bl	8000864 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	4a91      	ldr	r2, [pc, #580]	; (8003114 <HAL_RCC_OscConfig+0x628>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e116      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	2202      	movs	r2, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ee2:	231f      	movs	r3, #31
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	4b87      	ldr	r3, [pc, #540]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002ef2:	4989      	ldr	r1, [pc, #548]	; (8003118 <HAL_RCC_OscConfig+0x62c>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	4013      	ands	r3, r2
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d12a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f0a:	4b81      	ldr	r3, [pc, #516]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0e:	4b80      	ldr	r3, [pc, #512]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f10:	2104      	movs	r1, #4
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002f16:	4b7e      	ldr	r3, [pc, #504]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fd fc9f 	bl	8000864 <HAL_GetTick>
 8002f26:	0003      	movs	r3, r0
 8002f28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f2c:	f7fd fc9a 	bl	8000864 <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0e3      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f3e:	4b74      	ldr	r3, [pc, #464]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	2202      	movs	r2, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d0f1      	beq.n	8002f2c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f48:	4b71      	ldr	r3, [pc, #452]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	22f8      	movs	r2, #248	; 0xf8
 8002f4e:	4393      	bics	r3, r2
 8002f50:	0019      	movs	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	00da      	lsls	r2, r3, #3
 8002f58:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f5e:	e034      	b.n	8002fca <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	3305      	adds	r3, #5
 8002f66:	d111      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f68:	4b69      	ldr	r3, [pc, #420]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6c:	4b68      	ldr	r3, [pc, #416]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f6e:	2104      	movs	r1, #4
 8002f70:	438a      	bics	r2, r1
 8002f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	22f8      	movs	r2, #248	; 0xf8
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	00da      	lsls	r2, r3, #3
 8002f84:	4b62      	ldr	r3, [pc, #392]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8a:	e01e      	b.n	8002fca <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f8c:	4b60      	ldr	r3, [pc, #384]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f90:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f92:	2104      	movs	r1, #4
 8002f94:	430a      	orrs	r2, r1
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f98:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9c:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7fd fc5e 	bl	8000864 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fae:	f7fd fc59 	bl	8000864 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0a2      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d1f1      	bne.n	8002fae <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d100      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4e8>
 8002fd2:	e097      	b.n	8003104 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd4:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	220c      	movs	r2, #12
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d100      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x4f6>
 8002fe0:	e06b      	b.n	80030ba <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d14c      	bne.n	8003084 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b48      	ldr	r3, [pc, #288]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8002ff0:	494a      	ldr	r1, [pc, #296]	; (800311c <HAL_RCC_OscConfig+0x630>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fd fc35 	bl	8000864 <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fd fc30 	bl	8000864 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e079      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	049b      	lsls	r3, r3, #18
 800301a:	4013      	ands	r3, r2
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301e:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	220f      	movs	r2, #15
 8003024:	4393      	bics	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302c:	4b38      	ldr	r3, [pc, #224]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 800302e:	430a      	orrs	r2, r1
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <HAL_RCC_OscConfig+0x634>)
 8003038:	4013      	ands	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	431a      	orrs	r2, r3
 8003046:	4b32      	ldr	r3, [pc, #200]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	0449      	lsls	r1, r1, #17
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fd fc03 	bl	8000864 <HAL_GetTick>
 800305e:	0003      	movs	r3, r0
 8003060:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fd fbfe 	bl	8000864 <HAL_GetTick>
 8003068:	0002      	movs	r2, r0
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e047      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003076:	4b26      	ldr	r3, [pc, #152]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	049b      	lsls	r3, r3, #18
 800307e:	4013      	ands	r3, r2
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x578>
 8003082:	e03f      	b.n	8003104 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003084:	4b22      	ldr	r3, [pc, #136]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b21      	ldr	r3, [pc, #132]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 800308a:	4924      	ldr	r1, [pc, #144]	; (800311c <HAL_RCC_OscConfig+0x630>)
 800308c:	400a      	ands	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fd fbe8 	bl	8000864 <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309a:	f7fd fbe3 	bl	8000864 <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e02c      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	049b      	lsls	r3, r3, #18
 80030b4:	4013      	ands	r3, r2
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x5ae>
 80030b8:	e024      	b.n	8003104 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e01f      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_RCC_OscConfig+0x624>)
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	025b      	lsls	r3, r3, #9
 80030d8:	401a      	ands	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10e      	bne.n	8003100 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	220f      	movs	r2, #15
 80030e6:	401a      	ands	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	23f0      	movs	r3, #240	; 0xf0
 80030f4:	039b      	lsls	r3, r3, #14
 80030f6:	401a      	ands	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b008      	add	sp, #32
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	40021000 	.word	0x40021000
 8003114:	00001388 	.word	0x00001388
 8003118:	efffffff 	.word	0xefffffff
 800311c:	feffffff 	.word	0xfeffffff
 8003120:	ffc2ffff 	.word	0xffc2ffff

08003124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0b3      	b.n	80032a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_RCC_ClockConfig+0x184>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d911      	bls.n	800316a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b58      	ldr	r3, [pc, #352]	; (80032a8 <HAL_RCC_ClockConfig+0x184>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	4393      	bics	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	4b55      	ldr	r3, [pc, #340]	; (80032a8 <HAL_RCC_ClockConfig+0x184>)
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_ClockConfig+0x184>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e09a      	b.n	80032a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2202      	movs	r2, #2
 8003170:	4013      	ands	r3, r2
 8003172:	d015      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2204      	movs	r2, #4
 800317a:	4013      	ands	r3, r2
 800317c:	d006      	beq.n	800318c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800317e:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 8003184:	21e0      	movs	r1, #224	; 0xe0
 8003186:	00c9      	lsls	r1, r1, #3
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	22f0      	movs	r2, #240	; 0xf0
 8003192:	4393      	bics	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	029b      	lsls	r3, r3, #10
 80031ba:	4013      	ands	r3, r2
 80031bc:	d114      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06e      	b.n	80032a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	049b      	lsls	r3, r3, #18
 80031d2:	4013      	ands	r3, r2
 80031d4:	d108      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e062      	b.n	80032a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2202      	movs	r2, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e05b      	b.n	80032a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e8:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	4393      	bics	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031fc:	f7fd fb32 	bl	8000864 <HAL_GetTick>
 8003200:	0003      	movs	r3, r0
 8003202:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003204:	e009      	b.n	800321a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003206:	f7fd fb2d 	bl	8000864 <HAL_GetTick>
 800320a:	0002      	movs	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_RCC_ClockConfig+0x18c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e042      	b.n	80032a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	220c      	movs	r2, #12
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1ec      	bne.n	8003206 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_RCC_ClockConfig+0x184>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d211      	bcs.n	800325e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_ClockConfig+0x184>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2201      	movs	r2, #1
 8003240:	4393      	bics	r3, r2
 8003242:	0019      	movs	r1, r3
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_RCC_ClockConfig+0x184>)
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x184>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	4013      	ands	r3, r2
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d001      	beq.n	800325e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e020      	b.n	80032a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <HAL_RCC_ClockConfig+0x190>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800327c:	f000 f820 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003280:	0001      	movs	r1, r0
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x188>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	220f      	movs	r2, #15
 800328a:	4013      	ands	r3, r2
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x194>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	000a      	movs	r2, r1
 8003292:	40da      	lsrs	r2, r3
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x198>)
 8003296:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003298:	2003      	movs	r0, #3
 800329a:	f7fd fa9d 	bl	80007d8 <HAL_InitTick>
  
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b004      	add	sp, #16
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40021000 	.word	0x40021000
 80032b0:	00001388 	.word	0x00001388
 80032b4:	fffff8ff 	.word	0xfffff8ff
 80032b8:	08005610 	.word	0x08005610
 80032bc:	20000008 	.word	0x20000008

080032c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b08f      	sub	sp, #60	; 0x3c
 80032c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80032c6:	2314      	movs	r3, #20
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032ce:	c313      	stmia	r3!, {r0, r1, r4}
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	4a29      	ldr	r2, [pc, #164]	; (800337c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032da:	c313      	stmia	r3!, {r0, r1, r4}
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e4:	2300      	movs	r3, #0
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e8:	2300      	movs	r3, #0
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80032f4:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	220c      	movs	r2, #12
 80032fe:	4013      	ands	r3, r2
 8003300:	2b04      	cmp	r3, #4
 8003302:	d002      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x4a>
 8003304:	2b08      	cmp	r3, #8
 8003306:	d003      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x50>
 8003308:	e02d      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_RCC_GetSysClockFreq+0xc4>)
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800330e:	e02d      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	0c9b      	lsrs	r3, r3, #18
 8003314:	220f      	movs	r2, #15
 8003316:	4013      	ands	r3, r2
 8003318:	2214      	movs	r2, #20
 800331a:	18ba      	adds	r2, r7, r2
 800331c:	5cd3      	ldrb	r3, [r2, r3]
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	220f      	movs	r2, #15
 8003326:	4013      	ands	r3, r2
 8003328:	1d3a      	adds	r2, r7, #4
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800332e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	025b      	lsls	r3, r3, #9
 8003334:	4013      	ands	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800333a:	4812      	ldr	r0, [pc, #72]	; (8003384 <HAL_RCC_GetSysClockFreq+0xc4>)
 800333c:	f7fc fee4 	bl	8000108 <__udivsi3>
 8003340:	0003      	movs	r3, r0
 8003342:	001a      	movs	r2, r3
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	4353      	muls	r3, r2
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
 800334a:	e009      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800334c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800334e:	000a      	movs	r2, r1
 8003350:	0152      	lsls	r2, r2, #5
 8003352:	1a52      	subs	r2, r2, r1
 8003354:	0193      	lsls	r3, r2, #6
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	185b      	adds	r3, r3, r1
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003364:	e002      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003368:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800336a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b00f      	add	sp, #60	; 0x3c
 8003374:	bd90      	pop	{r4, r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	080055e8 	.word	0x080055e8
 800337c:	080055f8 	.word	0x080055f8
 8003380:	40021000 	.word	0x40021000
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	025b      	lsls	r3, r3, #9
 80033a0:	4013      	ands	r3, r2
 80033a2:	d100      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80033a4:	e08f      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2317      	movs	r3, #23
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b57      	ldr	r3, [pc, #348]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	4013      	ands	r3, r2
 80033b8:	d111      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	4b54      	ldr	r3, [pc, #336]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	0549      	lsls	r1, r1, #21
 80033c4:	430a      	orrs	r2, r1
 80033c6:	61da      	str	r2, [r3, #28]
 80033c8:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	055b      	lsls	r3, r3, #21
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2317      	movs	r3, #23
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	d11a      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b49      	ldr	r3, [pc, #292]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b48      	ldr	r3, [pc, #288]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0049      	lsls	r1, r1, #1
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f8:	f7fd fa34 	bl	8000864 <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	e008      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003402:	f7fd fa2f 	bl	8000864 <HAL_GetTick>
 8003406:	0002      	movs	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b64      	cmp	r3, #100	; 0x64
 800340e:	d901      	bls.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e077      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4013      	ands	r3, r2
 800341e:	d0f0      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003420:	4b3a      	ldr	r3, [pc, #232]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003422:	6a1a      	ldr	r2, [r3, #32]
 8003424:	23c0      	movs	r3, #192	; 0xc0
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4013      	ands	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d034      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	23c0      	movs	r3, #192	; 0xc0
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4013      	ands	r3, r2
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	429a      	cmp	r2, r3
 8003440:	d02c      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003442:	4b32      	ldr	r3, [pc, #200]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4a33      	ldr	r2, [pc, #204]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003448:	4013      	ands	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800344c:	4b2f      	ldr	r3, [pc, #188]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	4b2e      	ldr	r3, [pc, #184]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	0249      	lsls	r1, r1, #9
 8003456:	430a      	orrs	r2, r1
 8003458:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800345a:	4b2c      	ldr	r3, [pc, #176]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003460:	492d      	ldr	r1, [pc, #180]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003462:	400a      	ands	r2, r1
 8003464:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	4013      	ands	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fd f9f6 	bl	8000864 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	e009      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fd f9f1 	bl	8000864 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4a24      	ldr	r2, [pc, #144]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e038      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	2202      	movs	r2, #2
 8003498:	4013      	ands	r3, r2
 800349a:	d0f0      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	4b18      	ldr	r3, [pc, #96]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034b0:	2317      	movs	r3, #23
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034c0:	4917      	ldr	r1, [pc, #92]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	4013      	ands	r3, r2
 80034ce:	d009      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	2203      	movs	r2, #3
 80034d6:	4393      	bics	r3, r2
 80034d8:	0019      	movs	r1, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034e0:	430a      	orrs	r2, r1
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2220      	movs	r2, #32
 80034ea:	4013      	ands	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	2210      	movs	r2, #16
 80034f4:	4393      	bics	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034fe:	430a      	orrs	r2, r1
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	40007000 	.word	0x40007000
 8003514:	fffffcff 	.word	0xfffffcff
 8003518:	fffeffff 	.word	0xfffeffff
 800351c:	00001388 	.word	0x00001388
 8003520:	efffffff 	.word	0xefffffff

08003524 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	0002      	movs	r2, r0
 800352c:	1dbb      	adds	r3, r7, #6
 800352e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003534:	1dbb      	adds	r3, r7, #6
 8003536:	2200      	movs	r2, #0
 8003538:	5e9b      	ldrsh	r3, [r3, r2]
 800353a:	2b84      	cmp	r3, #132	; 0x84
 800353c:	d006      	beq.n	800354c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800353e:	1dbb      	adds	r3, r7, #6
 8003540:	2200      	movs	r2, #0
 8003542:	5e9a      	ldrsh	r2, [r3, r2]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	18d3      	adds	r3, r2, r3
 8003548:	3303      	adds	r3, #3
 800354a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}

08003556 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800355c:	f3ef 8305 	mrs	r3, IPSR
 8003560:	607b      	str	r3, [r7, #4]
  return(result);
 8003562:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	4193      	sbcs	r3, r2
 8003568:	b2db      	uxtb	r3, r3
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003576:	f000 ffc7 	bl	8004508 <vTaskStartScheduler>
  
  return osOK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003584:	b089      	sub	sp, #36	; 0x24
 8003586:	af04      	add	r7, sp, #16
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <osThreadCreate+0x54>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01c      	beq.n	80035d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685c      	ldr	r4, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681d      	ldr	r5, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691e      	ldr	r6, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2208      	movs	r2, #8
 80035ac:	5e9b      	ldrsh	r3, [r3, r2]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7ff ffb8 	bl	8003524 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	9302      	str	r3, [sp, #8]
 80035c0:	9201      	str	r2, [sp, #4]
 80035c2:	9000      	str	r0, [sp, #0]
 80035c4:	000b      	movs	r3, r1
 80035c6:	0032      	movs	r2, r6
 80035c8:	0029      	movs	r1, r5
 80035ca:	0020      	movs	r0, r4
 80035cc:	f000 fe37 	bl	800423e <xTaskCreateStatic>
 80035d0:	0003      	movs	r3, r0
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e01d      	b.n	8003612 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685c      	ldr	r4, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035e2:	b29e      	uxth	r6, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2208      	movs	r2, #8
 80035e8:	5e9b      	ldrsh	r3, [r3, r2]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff ff9a 	bl	8003524 <makeFreeRtosPriority>
 80035f0:	0001      	movs	r1, r0
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	230c      	movs	r3, #12
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	9100      	str	r1, [sp, #0]
 80035fc:	0013      	movs	r3, r2
 80035fe:	0032      	movs	r2, r6
 8003600:	0029      	movs	r1, r5
 8003602:	0020      	movs	r0, r4
 8003604:	f000 fe5e 	bl	80042c4 <xTaskCreate>
 8003608:	0003      	movs	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b005      	add	sp, #20
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800361c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0019      	movs	r1, r3
 8003632:	2001      	movs	r0, #1
 8003634:	f000 fa58 	bl	8003ae8 <xQueueCreateMutexStatic>
 8003638:	0003      	movs	r3, r0
 800363a:	e003      	b.n	8003644 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800363c:	2001      	movs	r0, #1
 800363e:	f000 fa37 	bl	8003ab0 <xQueueCreateMutex>
 8003642:	0003      	movs	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <osMutexWait+0x18>
    return osErrorParameter;
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	e036      	b.n	80036d2 <osMutexWait+0x86>
  }
  
  ticks = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	3301      	adds	r3, #1
 800366c:	d103      	bne.n	8003676 <osMutexWait+0x2a>
    ticks = portMAX_DELAY;
 800366e:	2301      	movs	r3, #1
 8003670:	425b      	negs	r3, r3
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e009      	b.n	800368a <osMutexWait+0x3e>
  }
  else if (millisec != 0) {
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d006      	beq.n	800368a <osMutexWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <osMutexWait+0x3e>
      ticks = 1;
 8003686:	2301      	movs	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800368a:	f7ff ff64 	bl	8003556 <inHandlerMode>
 800368e:	1e03      	subs	r3, r0, #0
 8003690:	d013      	beq.n	80036ba <osMutexWait+0x6e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003692:	2308      	movs	r3, #8
 8003694:	18fa      	adds	r2, r7, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2100      	movs	r1, #0
 800369a:	0018      	movs	r0, r3
 800369c:	f000 fc39 	bl	8003f12 <xQueueReceiveFromISR>
 80036a0:	0003      	movs	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d001      	beq.n	80036aa <osMutexWait+0x5e>
      return osErrorOS;
 80036a6:	23ff      	movs	r3, #255	; 0xff
 80036a8:	e013      	b.n	80036d2 <osMutexWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00f      	beq.n	80036d0 <osMutexWait+0x84>
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <osMutexWait+0x90>)
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	0552      	lsls	r2, r2, #21
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e00a      	b.n	80036d0 <osMutexWait+0x84>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0011      	movs	r1, r2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 fb50 	bl	8003d66 <xQueueSemaphoreTake>
 80036c6:	0003      	movs	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d001      	beq.n	80036d0 <osMutexWait+0x84>
    return osErrorOS;
 80036cc:	23ff      	movs	r3, #255	; 0xff
 80036ce:	e000      	b.n	80036d2 <osMutexWait+0x86>
  }
  
  return osOK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80036f0:	f7ff ff31 	bl	8003556 <inHandlerMode>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d013      	beq.n	8003720 <osMutexRelease+0x40>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80036f8:	2308      	movs	r3, #8
 80036fa:	18fa      	adds	r2, r7, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0011      	movs	r1, r2
 8003700:	0018      	movs	r0, r3
 8003702:	f000 facb 	bl	8003c9c <xQueueGiveFromISR>
 8003706:	0003      	movs	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d001      	beq.n	8003710 <osMutexRelease+0x30>
      return osErrorOS;
 800370c:	23ff      	movs	r3, #255	; 0xff
 800370e:	e013      	b.n	8003738 <osMutexRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00f      	beq.n	8003736 <osMutexRelease+0x56>
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <osMutexRelease+0x60>)
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	0552      	lsls	r2, r2, #21
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e00a      	b.n	8003736 <osMutexRelease+0x56>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	2300      	movs	r3, #0
 8003724:	2200      	movs	r2, #0
 8003726:	2100      	movs	r1, #0
 8003728:	f000 f9fe 	bl	8003b28 <xQueueGenericSend>
 800372c:	0003      	movs	r3, r0
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <osMutexRelease+0x56>
  {
    result = osErrorOS;
 8003732:	23ff      	movs	r3, #255	; 0xff
 8003734:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b004      	add	sp, #16
 800373e:	bd80      	pop	{r7, pc}
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3308      	adds	r3, #8
 8003750:	001a      	movs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	4252      	negs	r2, r2
 800375c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3308      	adds	r3, #8
 8003762:	001a      	movs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3308      	adds	r3, #8
 800376c:	001a      	movs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}

08003780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}

08003796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b004      	add	sp, #16
 80037d8:	bd80      	pop	{r7, pc}

080037da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3301      	adds	r3, #1
 80037ee:	d103      	bne.n	80037f8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	e00c      	b.n	8003812 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3308      	adds	r3, #8
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e002      	b.n	8003806 <vListInsert+0x2c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	d2f6      	bcs.n	8003800 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b004      	add	sp, #16
 8003844:	bd80      	pop	{r7, pc}

08003846 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6852      	ldr	r2, [r2, #4]
 8003866:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b004      	add	sp, #16
 8003894:	bd80      	pop	{r7, pc}

08003896 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <xQueueGenericReset+0x18>
 80038aa:	b672      	cpsid	i
 80038ac:	e7fe      	b.n	80038ac <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80038ae:	f001 fbf7 	bl	80050a0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	434b      	muls	r3, r1
 80038c0:	18d2      	adds	r2, r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	1e59      	subs	r1, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	434b      	muls	r3, r1
 80038e4:	18d2      	adds	r2, r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2244      	movs	r2, #68	; 0x44
 80038ee:	21ff      	movs	r1, #255	; 0xff
 80038f0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2245      	movs	r2, #69	; 0x45
 80038f6:	21ff      	movs	r1, #255	; 0xff
 80038f8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d109      	bne.n	8003914 <xQueueGenericReset+0x7e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <xQueueGenericReset+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3310      	adds	r3, #16
 800390c:	0018      	movs	r0, r3
 800390e:	f000 ffdf 	bl	80048d0 <xTaskRemoveFromEventList>
 8003912:	e009      	b.n	8003928 <xQueueGenericReset+0x92>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3310      	adds	r3, #16
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff ff13 	bl	8003744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3324      	adds	r3, #36	; 0x24
 8003922:	0018      	movs	r0, r3
 8003924:	f7ff ff0e 	bl	8003744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003928:	f001 fbcc 	bl	80050c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800392c:	2301      	movs	r3, #1
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b004      	add	sp, #16
 8003934:	bd80      	pop	{r7, pc}

08003936 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b089      	sub	sp, #36	; 0x24
 800393a:	af02      	add	r7, sp, #8
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <xQueueGenericCreateStatic+0x18>
 800394a:	b672      	cpsid	i
 800394c:	e7fe      	b.n	800394c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <xQueueGenericCreateStatic+0x22>
 8003954:	b672      	cpsid	i
 8003956:	e7fe      	b.n	8003956 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <xQueueGenericCreateStatic+0x2e>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <xQueueGenericCreateStatic+0x32>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <xQueueGenericCreateStatic+0x34>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <xQueueGenericCreateStatic+0x3c>
 800396e:	b672      	cpsid	i
 8003970:	e7fe      	b.n	8003970 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <xQueueGenericCreateStatic+0x48>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <xQueueGenericCreateStatic+0x4c>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <xQueueGenericCreateStatic+0x4e>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <xQueueGenericCreateStatic+0x56>
 8003988:	b672      	cpsid	i
 800398a:	e7fe      	b.n	800398a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800398c:	2348      	movs	r3, #72	; 0x48
 800398e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b48      	cmp	r3, #72	; 0x48
 8003994:	d001      	beq.n	800399a <xQueueGenericCreateStatic+0x64>
 8003996:	b672      	cpsid	i
 8003998:	e7fe      	b.n	8003998 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00e      	beq.n	80039c2 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2246      	movs	r2, #70	; 0x46
 80039a8:	2101      	movs	r1, #1
 80039aa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039ac:	2328      	movs	r3, #40	; 0x28
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	781c      	ldrb	r4, [r3, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	0023      	movs	r3, r4
 80039be:	f000 f83b 	bl	8003a38 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80039c2:	697b      	ldr	r3, [r7, #20]
	}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b007      	add	sp, #28
 80039ca:	bd90      	pop	{r4, r7, pc}

080039cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b08b      	sub	sp, #44	; 0x2c
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <xQueueGenericCreate+0x18>
 80039e0:	b672      	cpsid	i
 80039e2:	e7fe      	b.n	80039e2 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	e003      	b.n	80039f8 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4353      	muls	r3, r2
 80039f6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3348      	adds	r3, #72	; 0x48
 80039fc:	0018      	movs	r0, r3
 80039fe:	f001 fbe7 	bl	80051d0 <pvPortMalloc>
 8003a02:	0003      	movs	r3, r0
 8003a04:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	3348      	adds	r3, #72	; 0x48
 8003a10:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2246      	movs	r2, #70	; 0x46
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	781c      	ldrb	r4, [r3, #0]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	0023      	movs	r3, r4
 8003a2a:	f000 f805 	bl	8003a38 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a30:	0018      	movs	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b009      	add	sp, #36	; 0x24
 8003a36:	bd90      	pop	{r4, r7, pc}

08003a38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	001a      	movs	r2, r3
 8003a46:	1cfb      	adds	r3, r7, #3
 8003a48:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d103      	bne.n	8003a58 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e002      	b.n	8003a5e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7ff ff11 	bl	8003896 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00e      	beq.n	8003aa8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f000 f840 	bl	8003b28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b002      	add	sp, #8
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003abc:	2301      	movs	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003ac4:	1dfb      	adds	r3, r7, #7
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	6939      	ldr	r1, [r7, #16]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7ff ff7d 	bl	80039cc <xQueueGenericCreate>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7ff ffcf 	bl	8003a7c <prvInitialiseMutex>

		return pxNewQueue;
 8003ade:	68fb      	ldr	r3, [r7, #12]
	}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b006      	add	sp, #24
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	0002      	movs	r2, r0
 8003af0:	6039      	str	r1, [r7, #0]
 8003af2:	1dfb      	adds	r3, r7, #7
 8003af4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003af6:	2301      	movs	r3, #1
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	6939      	ldr	r1, [r7, #16]
 8003b02:	6978      	ldr	r0, [r7, #20]
 8003b04:	1dfb      	adds	r3, r7, #7
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	0013      	movs	r3, r2
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f7ff ff12 	bl	8003936 <xQueueGenericCreateStatic>
 8003b12:	0003      	movs	r3, r0
 8003b14:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff ffaf 	bl	8003a7c <prvInitialiseMutex>

		return pxNewQueue;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
	}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b006      	add	sp, #24
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <xQueueGenericSend+0x20>
 8003b44:	b672      	cpsid	i
 8003b46:	e7fe      	b.n	8003b46 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <xQueueGenericSend+0x2e>
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <xQueueGenericSend+0x32>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <xQueueGenericSend+0x34>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <xQueueGenericSend+0x3c>
 8003b60:	b672      	cpsid	i
 8003b62:	e7fe      	b.n	8003b62 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d103      	bne.n	8003b72 <xQueueGenericSend+0x4a>
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <xQueueGenericSend+0x4e>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <xQueueGenericSend+0x50>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <xQueueGenericSend+0x58>
 8003b7c:	b672      	cpsid	i
 8003b7e:	e7fe      	b.n	8003b7e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b80:	f001 f838 	bl	8004bf4 <xTaskGetSchedulerState>
 8003b84:	1e03      	subs	r3, r0, #0
 8003b86:	d102      	bne.n	8003b8e <xQueueGenericSend+0x66>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <xQueueGenericSend+0x6a>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <xQueueGenericSend+0x6c>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <xQueueGenericSend+0x74>
 8003b98:	b672      	cpsid	i
 8003b9a:	e7fe      	b.n	8003b9a <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b9c:	f001 fa80 	bl	80050a0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <xQueueGenericSend+0x8a>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d114      	bne.n	8003bdc <xQueueGenericSend+0xb4>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 fa23 	bl	8004004 <prvCopyDataToQueue>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d004      	beq.n	8003bd4 <xQueueGenericSend+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	3324      	adds	r3, #36	; 0x24
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f000 fe7e 	bl	80048d0 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bd4:	f001 fa76 	bl	80050c4 <vPortExitCritical>
				return pdPASS;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e05b      	b.n	8003c94 <xQueueGenericSend+0x16c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <xQueueGenericSend+0xc2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003be2:	f001 fa6f 	bl	80050c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e054      	b.n	8003c94 <xQueueGenericSend+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <xQueueGenericSend+0xd6>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bf0:	2314      	movs	r3, #20
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fec7 	bl	8004988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bfe:	f001 fa61 	bl	80050c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c02:	f000 fccf 	bl	80045a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c06:	f001 fa4b 	bl	80050a0 <vPortEnterCritical>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	2244      	movs	r2, #68	; 0x44
 8003c0e:	5c9b      	ldrb	r3, [r3, r2]
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	d103      	bne.n	8003c1e <xQueueGenericSend+0xf6>
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	2244      	movs	r2, #68	; 0x44
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	5499      	strb	r1, [r3, r2]
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	2245      	movs	r2, #69	; 0x45
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	d103      	bne.n	8003c32 <xQueueGenericSend+0x10a>
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	2245      	movs	r2, #69	; 0x45
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5499      	strb	r1, [r3, r2]
 8003c32:	f001 fa47 	bl	80050c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c36:	1d3a      	adds	r2, r7, #4
 8003c38:	2314      	movs	r3, #20
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 feb6 	bl	80049b0 <xTaskCheckForTimeOut>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d11e      	bne.n	8003c86 <xQueueGenericSend+0x15e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 fadf 	bl	800420e <prvIsQueueFull>
 8003c50:	1e03      	subs	r3, r0, #0
 8003c52:	d011      	beq.n	8003c78 <xQueueGenericSend+0x150>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	3310      	adds	r3, #16
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fe19 	bl	8004894 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f000 fa5e 	bl	8004126 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c6a:	f000 fca7 	bl	80045bc <xTaskResumeAll>
 8003c6e:	1e03      	subs	r3, r0, #0
 8003c70:	d194      	bne.n	8003b9c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003c72:	f001 fa05 	bl	8005080 <vPortYield>
 8003c76:	e791      	b.n	8003b9c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 fa53 	bl	8004126 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c80:	f000 fc9c 	bl	80045bc <xTaskResumeAll>
 8003c84:	e78a      	b.n	8003b9c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f000 fa4c 	bl	8004126 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c8e:	f000 fc95 	bl	80045bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c92:	2300      	movs	r3, #0
		}
	}
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b00a      	add	sp, #40	; 0x28
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <xQueueGiveFromISR+0x18>
 8003cb0:	b672      	cpsid	i
 8003cb2:	e7fe      	b.n	8003cb2 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <xQueueGiveFromISR+0x24>
 8003cbc:	b672      	cpsid	i
 8003cbe:	e7fe      	b.n	8003cbe <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <xQueueGiveFromISR+0x34>
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <xQueueGiveFromISR+0x38>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <xQueueGiveFromISR+0x3a>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <xQueueGiveFromISR+0x42>
 8003cda:	b672      	cpsid	i
 8003cdc:	e7fe      	b.n	8003cdc <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cde:	f001 fa09 	bl	80050f4 <ulSetInterruptMaskFromISR>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d22c      	bcs.n	8003d50 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cf6:	200f      	movs	r0, #15
 8003cf8:	183b      	adds	r3, r7, r0
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	2145      	movs	r1, #69	; 0x45
 8003cfe:	5c52      	ldrb	r2, [r2, r1]
 8003d00:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b25b      	sxtb	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	d111      	bne.n	8003d38 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	0018      	movs	r0, r3
 8003d22:	f000 fdd5 	bl	80048d0 <xTaskRemoveFromEventList>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d00f      	beq.n	8003d4a <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00c      	beq.n	8003d4a <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e008      	b.n	8003d4a <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d38:	230f      	movs	r3, #15
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	b259      	sxtb	r1, r3
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2245      	movs	r2, #69	; 0x45
 8003d48:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e001      	b.n	8003d54 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f001 f9d2 	bl	8005100 <vClearInterruptMaskFromISR>

	return xReturn;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
}
 8003d5e:	0018      	movs	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b008      	add	sp, #32
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b08a      	sub	sp, #40	; 0x28
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <xQueueSemaphoreTake+0x20>
 8003d82:	b672      	cpsid	i
 8003d84:	e7fe      	b.n	8003d84 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <xQueueSemaphoreTake+0x2c>
 8003d8e:	b672      	cpsid	i
 8003d90:	e7fe      	b.n	8003d90 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d92:	f000 ff2f 	bl	8004bf4 <xTaskGetSchedulerState>
 8003d96:	1e03      	subs	r3, r0, #0
 8003d98:	d102      	bne.n	8003da0 <xQueueSemaphoreTake+0x3a>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <xQueueSemaphoreTake+0x3e>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <xQueueSemaphoreTake+0x40>
 8003da4:	2300      	movs	r3, #0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <xQueueSemaphoreTake+0x48>
 8003daa:	b672      	cpsid	i
 8003dac:	e7fe      	b.n	8003dac <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dae:	f001 f977 	bl	80050a0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d019      	beq.n	8003df2 <xQueueSemaphoreTake+0x8c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1e5a      	subs	r2, r3, #1
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003dce:	f001 f86b 	bl	8004ea8 <pvTaskIncrementMutexHeldCount>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <xQueueSemaphoreTake+0x84>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3310      	adds	r3, #16
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 fd73 	bl	80048d0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dea:	f001 f96b 	bl	80050c4 <vPortExitCritical>
				return pdPASS;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e08b      	b.n	8003f0a <xQueueSemaphoreTake+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d108      	bne.n	8003e0a <xQueueSemaphoreTake+0xa4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <xQueueSemaphoreTake+0x9c>
 8003dfe:	b672      	cpsid	i
 8003e00:	e7fe      	b.n	8003e00 <xQueueSemaphoreTake+0x9a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e02:	f001 f95f 	bl	80050c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e07f      	b.n	8003f0a <xQueueSemaphoreTake+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <xQueueSemaphoreTake+0xb8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e10:	230c      	movs	r3, #12
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 fdb7 	bl	8004988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e1e:	f001 f951 	bl	80050c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e22:	f000 fbbf 	bl	80045a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e26:	f001 f93b 	bl	80050a0 <vPortEnterCritical>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	2244      	movs	r2, #68	; 0x44
 8003e2e:	5c9b      	ldrb	r3, [r3, r2]
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	3301      	adds	r3, #1
 8003e34:	d103      	bne.n	8003e3e <xQueueSemaphoreTake+0xd8>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	2244      	movs	r2, #68	; 0x44
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2245      	movs	r2, #69	; 0x45
 8003e42:	5c9b      	ldrb	r3, [r3, r2]
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	d103      	bne.n	8003e52 <xQueueSemaphoreTake+0xec>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2245      	movs	r2, #69	; 0x45
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]
 8003e52:	f001 f937 	bl	80050c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e56:	003a      	movs	r2, r7
 8003e58:	230c      	movs	r3, #12
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	0011      	movs	r1, r2
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 fda6 	bl	80049b0 <xTaskCheckForTimeOut>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d12e      	bne.n	8003ec6 <xQueueSemaphoreTake+0x160>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 f9b9 	bl	80041e2 <prvIsQueueEmpty>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d021      	beq.n	8003eb8 <xQueueSemaphoreTake+0x152>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xQueueSemaphoreTake+0x12c>
					{
						taskENTER_CRITICAL();
 8003e7c:	f001 f910 	bl	80050a0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f000 fed1 	bl	8004c2c <xTaskPriorityInherit>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8003e8e:	f001 f919 	bl	80050c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3324      	adds	r3, #36	; 0x24
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	0011      	movs	r1, r2
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 fcfa 	bl	8004894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 f93f 	bl	8004126 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ea8:	f000 fb88 	bl	80045bc <xTaskResumeAll>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d000      	beq.n	8003eb2 <xQueueSemaphoreTake+0x14c>
 8003eb0:	e77d      	b.n	8003dae <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8003eb2:	f001 f8e5 	bl	8005080 <vPortYield>
 8003eb6:	e77a      	b.n	8003dae <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f000 f933 	bl	8004126 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ec0:	f000 fb7c 	bl	80045bc <xTaskResumeAll>
 8003ec4:	e773      	b.n	8003dae <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f92c 	bl	8004126 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ece:	f000 fb75 	bl	80045bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f984 	bl	80041e2 <prvIsQueueEmpty>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d100      	bne.n	8003ee0 <xQueueSemaphoreTake+0x17a>
 8003ede:	e766      	b.n	8003dae <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d010      	beq.n	8003f08 <xQueueSemaphoreTake+0x1a2>
					{
						taskENTER_CRITICAL();
 8003ee6:	f001 f8db 	bl	80050a0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 f873 	bl	8003fd8 <prvGetDisinheritPriorityAfterTimeout>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 ff5e 	bl	8004dc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f04:	f001 f8de 	bl	80050c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b00a      	add	sp, #40	; 0x28
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f12:	b590      	push	{r4, r7, lr}
 8003f14:	b08b      	sub	sp, #44	; 0x2c
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <xQueueReceiveFromISR+0x1a>
 8003f28:	b672      	cpsid	i
 8003f2a:	e7fe      	b.n	8003f2a <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <xQueueReceiveFromISR+0x28>
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <xQueueReceiveFromISR+0x2c>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <xQueueReceiveFromISR+0x2e>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <xQueueReceiveFromISR+0x36>
 8003f44:	b672      	cpsid	i
 8003f46:	e7fe      	b.n	8003f46 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f48:	f001 f8d4 	bl	80050f4 <ulSetInterruptMaskFromISR>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d032      	beq.n	8003fc2 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f5c:	2417      	movs	r4, #23
 8003f5e:	193b      	adds	r3, r7, r4
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	2144      	movs	r1, #68	; 0x44
 8003f64:	5c52      	ldrb	r2, [r2, r1]
 8003f66:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 f8b3 	bl	80040da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	1e5a      	subs	r2, r3, #1
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	3301      	adds	r3, #1
 8003f84:	d111      	bne.n	8003faa <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	3310      	adds	r3, #16
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fc9c 	bl	80048d0 <xTaskRemoveFromEventList>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d00f      	beq.n	8003fbc <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00c      	beq.n	8003fbc <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e008      	b.n	8003fbc <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003faa:	2317      	movs	r3, #23
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	b259      	sxtb	r1, r3
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	2244      	movs	r2, #68	; 0x44
 8003fba:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc0:	e001      	b.n	8003fc6 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f001 f899 	bl	8005100 <vClearInterruptMaskFromISR>

	return xReturn;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b00b      	add	sp, #44	; 0x2c
 8003fd6:	bd90      	pop	{r4, r7, pc}

08003fd8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2207      	movs	r2, #7
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e001      	b.n	8003ffa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
	}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b004      	add	sp, #16
 8004002:	bd80      	pop	{r7, pc}

08004004 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10e      	bne.n	8004040 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d14e      	bne.n	80040c8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	0018      	movs	r0, r3
 8004030:	f000 fe6a 	bl	8004d08 <xTaskPriorityDisinherit>
 8004034:	0003      	movs	r3, r0
 8004036:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	e043      	b.n	80040c8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d119      	bne.n	800407a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6898      	ldr	r0, [r3, #8]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	0019      	movs	r1, r3
 8004052:	f001 fa87 	bl	8005564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	18d2      	adds	r2, r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	d32b      	bcc.n	80040c8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	e026      	b.n	80040c8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68d8      	ldr	r0, [r3, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	0019      	movs	r1, r3
 8004086:	f001 fa6d 	bl	8005564 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	425b      	negs	r3, r3
 8004094:	18d2      	adds	r2, r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d207      	bcs.n	80040b6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	425b      	negs	r3, r3
 80040b0:	18d2      	adds	r2, r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d105      	bne.n	80040c8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040d0:	697b      	ldr	r3, [r7, #20]
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b006      	add	sp, #24
 80040d8:	bd80      	pop	{r7, pc}

080040da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d018      	beq.n	800411e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	18d2      	adds	r2, r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d303      	bcc.n	800410e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68d9      	ldr	r1, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	0018      	movs	r0, r3
 800411a:	f001 fa23 	bl	8005564 <memcpy>
	}
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}

08004126 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800412e:	f000 ffb7 	bl	80050a0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004132:	230f      	movs	r3, #15
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	2145      	movs	r1, #69	; 0x45
 800413a:	5c52      	ldrb	r2, [r2, r1]
 800413c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800413e:	e013      	b.n	8004168 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d016      	beq.n	8004176 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3324      	adds	r3, #36	; 0x24
 800414c:	0018      	movs	r0, r3
 800414e:	f000 fbbf 	bl	80048d0 <xTaskRemoveFromEventList>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d001      	beq.n	800415a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004156:	f000 fc7b 	bl	8004a50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800415a:	210f      	movs	r1, #15
 800415c:	187b      	adds	r3, r7, r1
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	b2da      	uxtb	r2, r3
 8004164:	187b      	adds	r3, r7, r1
 8004166:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004168:	230f      	movs	r3, #15
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b25b      	sxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	dce5      	bgt.n	8004140 <prvUnlockQueue+0x1a>
 8004174:	e000      	b.n	8004178 <prvUnlockQueue+0x52>
					break;
 8004176:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2245      	movs	r2, #69	; 0x45
 800417c:	21ff      	movs	r1, #255	; 0xff
 800417e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004180:	f000 ffa0 	bl	80050c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004184:	f000 ff8c 	bl	80050a0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004188:	230e      	movs	r3, #14
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	2144      	movs	r1, #68	; 0x44
 8004190:	5c52      	ldrb	r2, [r2, r1]
 8004192:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004194:	e013      	b.n	80041be <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3310      	adds	r3, #16
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 fb94 	bl	80048d0 <xTaskRemoveFromEventList>
 80041a8:	1e03      	subs	r3, r0, #0
 80041aa:	d001      	beq.n	80041b0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80041ac:	f000 fc50 	bl	8004a50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041b0:	210e      	movs	r1, #14
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041be:	230e      	movs	r3, #14
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	b25b      	sxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	dce5      	bgt.n	8004196 <prvUnlockQueue+0x70>
 80041ca:	e000      	b.n	80041ce <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80041cc:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2244      	movs	r2, #68	; 0x44
 80041d2:	21ff      	movs	r1, #255	; 0xff
 80041d4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80041d6:	f000 ff75 	bl	80050c4 <vPortExitCritical>
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b004      	add	sp, #16
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041ea:	f000 ff59 	bl	80050a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041f6:	2301      	movs	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e001      	b.n	8004200 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004200:	f000 ff60 	bl	80050c4 <vPortExitCritical>

	return xReturn;
 8004204:	68fb      	ldr	r3, [r7, #12]
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bd80      	pop	{r7, pc}

0800420e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004216:	f000 ff43 	bl	80050a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	429a      	cmp	r2, r3
 8004224:	d102      	bne.n	800422c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004226:	2301      	movs	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e001      	b.n	8004230 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004230:	f000 ff48 	bl	80050c4 <vPortExitCritical>

	return xReturn;
 8004234:	68fb      	ldr	r3, [r7, #12]
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b004      	add	sp, #16
 800423c:	bd80      	pop	{r7, pc}

0800423e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800423e:	b590      	push	{r4, r7, lr}
 8004240:	b08d      	sub	sp, #52	; 0x34
 8004242:	af04      	add	r7, sp, #16
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <xTaskCreateStatic+0x18>
 8004252:	b672      	cpsid	i
 8004254:	e7fe      	b.n	8004254 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <xTaskCreateStatic+0x22>
 800425c:	b672      	cpsid	i
 800425e:	e7fe      	b.n	800425e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004260:	2354      	movs	r3, #84	; 0x54
 8004262:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b54      	cmp	r3, #84	; 0x54
 8004268:	d001      	beq.n	800426e <xTaskCreateStatic+0x30>
 800426a:	b672      	cpsid	i
 800426c:	e7fe      	b.n	800426c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d020      	beq.n	80042b6 <xTaskCreateStatic+0x78>
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01d      	beq.n	80042b6 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004282:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2251      	movs	r2, #81	; 0x51
 8004288:	2102      	movs	r1, #2
 800428a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800428c:	683c      	ldr	r4, [r7, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	2300      	movs	r3, #0
 8004296:	9303      	str	r3, [sp, #12]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	9302      	str	r3, [sp, #8]
 800429c:	2318      	movs	r3, #24
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	0023      	movs	r3, r4
 80042a8:	f000 f858 	bl	800435c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 f8ce 	bl	8004450 <prvAddNewTaskToReadyList>
 80042b4:	e001      	b.n	80042ba <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042ba:	69bb      	ldr	r3, [r7, #24]
	}
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b009      	add	sp, #36	; 0x24
 80042c2:	bd90      	pop	{r4, r7, pc}

080042c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b08d      	sub	sp, #52	; 0x34
 80042c8:	af04      	add	r7, sp, #16
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	1dbb      	adds	r3, r7, #6
 80042d2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d4:	1dbb      	adds	r3, r7, #6
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 ff78 	bl	80051d0 <pvPortMalloc>
 80042e0:	0003      	movs	r3, r0
 80042e2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d010      	beq.n	800430c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80042ea:	2054      	movs	r0, #84	; 0x54
 80042ec:	f000 ff70 	bl	80051d0 <pvPortMalloc>
 80042f0:	0003      	movs	r3, r0
 80042f2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004300:	e006      	b.n	8004310 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	0018      	movs	r0, r3
 8004306:	f001 f809 	bl	800531c <vPortFree>
 800430a:	e001      	b.n	8004310 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01a      	beq.n	800434c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2251      	movs	r2, #81	; 0x51
 800431a:	2100      	movs	r1, #0
 800431c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800431e:	1dbb      	adds	r3, r7, #6
 8004320:	881a      	ldrh	r2, [r3, #0]
 8004322:	683c      	ldr	r4, [r7, #0]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	2300      	movs	r3, #0
 800432a:	9303      	str	r3, [sp, #12]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	9302      	str	r3, [sp, #8]
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	0023      	movs	r3, r4
 800433a:	f000 f80f 	bl	800435c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	0018      	movs	r0, r3
 8004342:	f000 f885 	bl	8004450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004346:	2301      	movs	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e002      	b.n	8004352 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800434c:	2301      	movs	r3, #1
 800434e:	425b      	negs	r3, r3
 8004350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004352:	69bb      	ldr	r3, [r7, #24]
	}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b009      	add	sp, #36	; 0x24
 800435a:	bd90      	pop	{r4, r7, pc}

0800435c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4936      	ldr	r1, [pc, #216]	; (800444c <prvInitialiseNewTask+0xf0>)
 8004372:	468c      	mov	ip, r1
 8004374:	4463      	add	r3, ip
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	18d3      	adds	r3, r2, r3
 800437a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2207      	movs	r2, #7
 8004380:	4393      	bics	r3, r2
 8004382:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2207      	movs	r2, #7
 8004388:	4013      	ands	r3, r2
 800438a:	d001      	beq.n	8004390 <prvInitialiseNewTask+0x34>
 800438c:	b672      	cpsid	i
 800438e:	e7fe      	b.n	800438e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e013      	b.n	80043be <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	18d3      	adds	r3, r2, r3
 800439c:	7818      	ldrb	r0, [r3, #0]
 800439e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a0:	2134      	movs	r1, #52	; 0x34
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	185b      	adds	r3, r3, r1
 80043a8:	1c02      	adds	r2, r0, #0
 80043aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	18d3      	adds	r3, r2, r3
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3301      	adds	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b0f      	cmp	r3, #15
 80043c2:	d9e8      	bls.n	8004396 <prvInitialiseNewTask+0x3a>
 80043c4:	e000      	b.n	80043c8 <prvInitialiseNewTask+0x6c>
		{
			break;
 80043c6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	2243      	movs	r2, #67	; 0x43
 80043cc:	2100      	movs	r1, #0
 80043ce:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d901      	bls.n	80043da <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043d6:	2306      	movs	r3, #6
 80043d8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	6a3a      	ldr	r2, [r7, #32]
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	6a3a      	ldr	r2, [r7, #32]
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	2200      	movs	r2, #0
 80043ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	3304      	adds	r3, #4
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff f9c5 	bl	8003780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	3318      	adds	r3, #24
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7ff f9c0 	bl	8003780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004404:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	2207      	movs	r2, #7
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2200      	movs	r2, #0
 800441a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	2250      	movs	r2, #80	; 0x50
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	68f9      	ldr	r1, [r7, #12]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	0018      	movs	r0, r3
 800442c:	f000 fda2 	bl	8004f74 <pxPortInitialiseStack>
 8004430:	0002      	movs	r2, r0
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	b006      	add	sp, #24
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	3fffffff 	.word	0x3fffffff

08004450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004458:	f000 fe22 	bl	80050a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800445c:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <prvAddNewTaskToReadyList+0xa0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <prvAddNewTaskToReadyList+0xa0>)
 8004464:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <prvAddNewTaskToReadyList+0xa4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <prvAddNewTaskToReadyList+0xa4>)
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004474:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <prvAddNewTaskToReadyList+0xa0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d110      	bne.n	800449e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800447c:	f000 fafc 	bl	8004a78 <prvInitialiseTaskLists>
 8004480:	e00d      	b.n	800449e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <prvAddNewTaskToReadyList+0xa8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <prvAddNewTaskToReadyList+0xa4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	429a      	cmp	r2, r3
 8004496:	d802      	bhi.n	800449e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004498:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <prvAddNewTaskToReadyList+0xa4>)
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800449e:	4b17      	ldr	r3, [pc, #92]	; (80044fc <prvAddNewTaskToReadyList+0xac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	4b15      	ldr	r3, [pc, #84]	; (80044fc <prvAddNewTaskToReadyList+0xac>)
 80044a6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <prvAddNewTaskToReadyList+0xb0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d903      	bls.n	80044bc <prvAddNewTaskToReadyList+0x6c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <prvAddNewTaskToReadyList+0xb0>)
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	0013      	movs	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <prvAddNewTaskToReadyList+0xb4>)
 80044ca:	189a      	adds	r2, r3, r2
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	0019      	movs	r1, r3
 80044d2:	0010      	movs	r0, r2
 80044d4:	f7ff f95f 	bl	8003796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044d8:	f000 fdf4 	bl	80050c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <prvAddNewTaskToReadyList+0xa8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <prvAddNewTaskToReadyList+0x98>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <prvAddNewTaskToReadyList+0xa4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20000390 	.word	0x20000390
 80044f4:	20000290 	.word	0x20000290
 80044f8:	2000039c 	.word	0x2000039c
 80044fc:	200003ac 	.word	0x200003ac
 8004500:	20000398 	.word	0x20000398
 8004504:	20000294 	.word	0x20000294

08004508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004516:	003a      	movs	r2, r7
 8004518:	1d39      	adds	r1, r7, #4
 800451a:	2308      	movs	r3, #8
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	0018      	movs	r0, r3
 8004520:	f7fb fe7e 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004524:	683c      	ldr	r4, [r7, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	4918      	ldr	r1, [pc, #96]	; (800458c <vTaskStartScheduler+0x84>)
 800452c:	4818      	ldr	r0, [pc, #96]	; (8004590 <vTaskStartScheduler+0x88>)
 800452e:	9202      	str	r2, [sp, #8]
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	2300      	movs	r3, #0
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	2300      	movs	r3, #0
 8004538:	0022      	movs	r2, r4
 800453a:	f7ff fe80 	bl	800423e <xTaskCreateStatic>
 800453e:	0002      	movs	r2, r0
 8004540:	4b14      	ldr	r3, [pc, #80]	; (8004594 <vTaskStartScheduler+0x8c>)
 8004542:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <vTaskStartScheduler+0x8c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800454c:	2301      	movs	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e001      	b.n	8004556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10d      	bne.n	8004578 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800455c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <vTaskStartScheduler+0x90>)
 8004560:	2201      	movs	r2, #1
 8004562:	4252      	negs	r2, r2
 8004564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004566:	4b0d      	ldr	r3, [pc, #52]	; (800459c <vTaskStartScheduler+0x94>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <vTaskStartScheduler+0x98>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004572:	f000 fd61 	bl	8005038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004576:	e004      	b.n	8004582 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3301      	adds	r3, #1
 800457c:	d101      	bne.n	8004582 <vTaskStartScheduler+0x7a>
 800457e:	b672      	cpsid	i
 8004580:	e7fe      	b.n	8004580 <vTaskStartScheduler+0x78>
}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	46bd      	mov	sp, r7
 8004586:	b005      	add	sp, #20
 8004588:	bd90      	pop	{r4, r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	08005608 	.word	0x08005608
 8004590:	08004a65 	.word	0x08004a65
 8004594:	200003b4 	.word	0x200003b4
 8004598:	200003b0 	.word	0x200003b0
 800459c:	2000039c 	.word	0x2000039c
 80045a0:	20000394 	.word	0x20000394

080045a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <vTaskSuspendAll+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	4b02      	ldr	r3, [pc, #8]	; (80045b8 <vTaskSuspendAll+0x14>)
 80045b0:	601a      	str	r2, [r3, #0]
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	200003b8 	.word	0x200003b8

080045bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ca:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <xTaskResumeAll+0xec>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <xTaskResumeAll+0x1a>
 80045d2:	b672      	cpsid	i
 80045d4:	e7fe      	b.n	80045d4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045d6:	f000 fd63 	bl	80050a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045da:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <xTaskResumeAll+0xec>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1e5a      	subs	r2, r3, #1
 80045e0:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <xTaskResumeAll+0xec>)
 80045e2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e4:	4b30      	ldr	r3, [pc, #192]	; (80046a8 <xTaskResumeAll+0xec>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d155      	bne.n	8004698 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <xTaskResumeAll+0xf0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d051      	beq.n	8004698 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045f4:	e02f      	b.n	8004656 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045f6:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <xTaskResumeAll+0xf4>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3318      	adds	r3, #24
 8004602:	0018      	movs	r0, r3
 8004604:	f7ff f91f 	bl	8003846 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3304      	adds	r3, #4
 800460c:	0018      	movs	r0, r3
 800460e:	f7ff f91a 	bl	8003846 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <xTaskResumeAll+0xf8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d903      	bls.n	8004626 <xTaskResumeAll+0x6a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004622:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <xTaskResumeAll+0xf8>)
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	0013      	movs	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	189b      	adds	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <xTaskResumeAll+0xfc>)
 8004634:	189a      	adds	r2, r3, r2
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3304      	adds	r3, #4
 800463a:	0019      	movs	r1, r3
 800463c:	0010      	movs	r0, r2
 800463e:	f7ff f8aa 	bl	8003796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <xTaskResumeAll+0x100>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <xTaskResumeAll+0x104>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004656:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <xTaskResumeAll+0xf4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1cb      	bne.n	80045f6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004664:	f000 faa2 	bl	8004bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <xTaskResumeAll+0x108>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00f      	beq.n	8004694 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004674:	f000 f828 	bl	80046c8 <xTaskIncrementTick>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d002      	beq.n	8004682 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <xTaskResumeAll+0x104>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	3b01      	subs	r3, #1
 8004686:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f2      	bne.n	8004674 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <xTaskResumeAll+0x108>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <xTaskResumeAll+0x104>)
 8004696:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004698:	f000 fd14 	bl	80050c4 <vPortExitCritical>

	return xAlreadyYielded;
 800469c:	687b      	ldr	r3, [r7, #4]
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b004      	add	sp, #16
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	200003b8 	.word	0x200003b8
 80046ac:	20000390 	.word	0x20000390
 80046b0:	20000350 	.word	0x20000350
 80046b4:	20000398 	.word	0x20000398
 80046b8:	20000294 	.word	0x20000294
 80046bc:	20000290 	.word	0x20000290
 80046c0:	200003a4 	.word	0x200003a4
 80046c4:	200003a0 	.word	0x200003a0

080046c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d2:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <xTaskIncrementTick+0x104>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d000      	beq.n	80046dc <xTaskIncrementTick+0x14>
 80046da:	e06c      	b.n	80047b6 <xTaskIncrementTick+0xee>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046dc:	4b3c      	ldr	r3, [pc, #240]	; (80047d0 <xTaskIncrementTick+0x108>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046e4:	4b3a      	ldr	r3, [pc, #232]	; (80047d0 <xTaskIncrementTick+0x108>)
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d117      	bne.n	8004720 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80046f0:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <xTaskIncrementTick+0x10c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <xTaskIncrementTick+0x36>
 80046fa:	b672      	cpsid	i
 80046fc:	e7fe      	b.n	80046fc <xTaskIncrementTick+0x34>
 80046fe:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <xTaskIncrementTick+0x10c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <xTaskIncrementTick+0x110>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b32      	ldr	r3, [pc, #200]	; (80047d4 <xTaskIncrementTick+0x10c>)
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <xTaskIncrementTick+0x110>)
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	4b32      	ldr	r3, [pc, #200]	; (80047dc <xTaskIncrementTick+0x114>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	4b30      	ldr	r3, [pc, #192]	; (80047dc <xTaskIncrementTick+0x114>)
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f000 fa46 	bl	8004bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004720:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <xTaskIncrementTick+0x118>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	429a      	cmp	r2, r3
 8004728:	d34a      	bcc.n	80047c0 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <xTaskIncrementTick+0x10c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <xTaskIncrementTick+0x70>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <xTaskIncrementTick+0x72>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473e:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <xTaskIncrementTick+0x118>)
 8004740:	2201      	movs	r2, #1
 8004742:	4252      	negs	r2, r2
 8004744:	601a      	str	r2, [r3, #0]
					break;
 8004746:	e03b      	b.n	80047c0 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004748:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <xTaskIncrementTick+0x10c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d203      	bcs.n	8004768 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004760:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <xTaskIncrementTick+0x118>)
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
						break;
 8004766:	e02b      	b.n	80047c0 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	3304      	adds	r3, #4
 800476c:	0018      	movs	r0, r3
 800476e:	f7ff f86a 	bl	8003846 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3318      	adds	r3, #24
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff f861 	bl	8003846 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <xTaskIncrementTick+0x11c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d903      	bls.n	8004798 <xTaskIncrementTick+0xd0>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <xTaskIncrementTick+0x11c>)
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	0013      	movs	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	189b      	adds	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <xTaskIncrementTick+0x120>)
 80047a6:	189a      	adds	r2, r3, r2
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3304      	adds	r3, #4
 80047ac:	0019      	movs	r1, r3
 80047ae:	0010      	movs	r0, r2
 80047b0:	f7fe fff1 	bl	8003796 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b4:	e7b9      	b.n	800472a <xTaskIncrementTick+0x62>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <xTaskIncrementTick+0x124>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <xTaskIncrementTick+0x124>)
 80047be:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047c0:	697b      	ldr	r3, [r7, #20]
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b006      	add	sp, #24
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	200003b8 	.word	0x200003b8
 80047d0:	20000394 	.word	0x20000394
 80047d4:	20000348 	.word	0x20000348
 80047d8:	2000034c 	.word	0x2000034c
 80047dc:	200003a8 	.word	0x200003a8
 80047e0:	200003b0 	.word	0x200003b0
 80047e4:	20000398 	.word	0x20000398
 80047e8:	20000294 	.word	0x20000294
 80047ec:	200003a0 	.word	0x200003a0

080047f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <vTaskSwitchContext+0x90>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047fe:	4b21      	ldr	r3, [pc, #132]	; (8004884 <vTaskSwitchContext+0x94>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004804:	e037      	b.n	8004876 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <vTaskSwitchContext+0x94>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800480c:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <vTaskSwitchContext+0x98>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	e007      	b.n	8004824 <vTaskSwitchContext+0x34>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <vTaskSwitchContext+0x2e>
 800481a:	b672      	cpsid	i
 800481c:	e7fe      	b.n	800481c <vTaskSwitchContext+0x2c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	4919      	ldr	r1, [pc, #100]	; (800488c <vTaskSwitchContext+0x9c>)
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	0013      	movs	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	189b      	adds	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	585b      	ldr	r3, [r3, r1]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ee      	beq.n	8004814 <vTaskSwitchContext+0x24>
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	0013      	movs	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	189b      	adds	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4a12      	ldr	r2, [pc, #72]	; (800488c <vTaskSwitchContext+0x9c>)
 8004842:	189b      	adds	r3, r3, r2
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	3308      	adds	r3, #8
 8004858:	429a      	cmp	r2, r3
 800485a:	d104      	bne.n	8004866 <vTaskSwitchContext+0x76>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <vTaskSwitchContext+0xa0>)
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <vTaskSwitchContext+0x98>)
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	200003b8 	.word	0x200003b8
 8004884:	200003a4 	.word	0x200003a4
 8004888:	20000398 	.word	0x20000398
 800488c:	20000294 	.word	0x20000294
 8004890:	20000290 	.word	0x20000290

08004894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <vTaskPlaceOnEventList+0x14>
 80048a4:	b672      	cpsid	i
 80048a6:	e7fe      	b.n	80048a6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <vTaskPlaceOnEventList+0x38>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3318      	adds	r3, #24
 80048ae:	001a      	movs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0011      	movs	r1, r2
 80048b4:	0018      	movs	r0, r3
 80048b6:	f7fe ff90 	bl	80037da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2101      	movs	r1, #1
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 fb04 	bl	8004ecc <prvAddCurrentTaskToDelayedList>
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000290 	.word	0x20000290

080048d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <xTaskRemoveFromEventList+0x1a>
 80048e6:	b672      	cpsid	i
 80048e8:	e7fe      	b.n	80048e8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3318      	adds	r3, #24
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7fe ffa9 	bl	8003846 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f4:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <xTaskRemoveFromEventList+0xa0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11d      	bne.n	8004938 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	3304      	adds	r3, #4
 8004900:	0018      	movs	r0, r3
 8004902:	f7fe ffa0 	bl	8003846 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490a:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <xTaskRemoveFromEventList+0xa4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d903      	bls.n	800491a <xTaskRemoveFromEventList+0x4a>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	4b17      	ldr	r3, [pc, #92]	; (8004974 <xTaskRemoveFromEventList+0xa4>)
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491e:	0013      	movs	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	189b      	adds	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4a14      	ldr	r2, [pc, #80]	; (8004978 <xTaskRemoveFromEventList+0xa8>)
 8004928:	189a      	adds	r2, r3, r2
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3304      	adds	r3, #4
 800492e:	0019      	movs	r1, r3
 8004930:	0010      	movs	r0, r2
 8004932:	f7fe ff30 	bl	8003796 <vListInsertEnd>
 8004936:	e007      	b.n	8004948 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	3318      	adds	r3, #24
 800493c:	001a      	movs	r2, r3
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <xTaskRemoveFromEventList+0xac>)
 8004940:	0011      	movs	r1, r2
 8004942:	0018      	movs	r0, r3
 8004944:	f7fe ff27 	bl	8003796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <xTaskRemoveFromEventList+0xb0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	429a      	cmp	r2, r3
 8004954:	d905      	bls.n	8004962 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <xTaskRemoveFromEventList+0xb4>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e001      	b.n	8004966 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	0018      	movs	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	b004      	add	sp, #16
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200003b8 	.word	0x200003b8
 8004974:	20000398 	.word	0x20000398
 8004978:	20000294 	.word	0x20000294
 800497c:	20000350 	.word	0x20000350
 8004980:	20000290 	.word	0x20000290
 8004984:	200003a4 	.word	0x200003a4

08004988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <vTaskInternalSetTimeOutState+0x20>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <vTaskInternalSetTimeOutState+0x24>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	605a      	str	r2, [r3, #4]
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200003a8 	.word	0x200003a8
 80049ac:	20000394 	.word	0x20000394

080049b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <xTaskCheckForTimeOut+0x14>
 80049c0:	b672      	cpsid	i
 80049c2:	e7fe      	b.n	80049c2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <xTaskCheckForTimeOut+0x1e>
 80049ca:	b672      	cpsid	i
 80049cc:	e7fe      	b.n	80049cc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80049ce:	f000 fb67 	bl	80050a0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049d2:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <xTaskCheckForTimeOut+0x98>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	d102      	bne.n	80049f0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	e024      	b.n	8004a3a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <xTaskCheckForTimeOut+0x9c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d007      	beq.n	8004a0c <xTaskCheckForTimeOut+0x5c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a06:	2301      	movs	r3, #1
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e016      	b.n	8004a3a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d20c      	bcs.n	8004a30 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad2      	subs	r2, r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7ff ffaf 	bl	8004988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e004      	b.n	8004a3a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004a3a:	f000 fb43 	bl	80050c4 <vPortExitCritical>

	return xReturn;
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b006      	add	sp, #24
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000394 	.word	0x20000394
 8004a4c:	200003a8 	.word	0x200003a8

08004a50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a54:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <vTaskMissedYield+0x10>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200003a4 	.word	0x200003a4

08004a64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a6c:	f000 f848 	bl	8004b00 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8004a70:	f000 fb06 	bl	8005080 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004a74:	e7fa      	b.n	8004a6c <prvIdleTask+0x8>
	...

08004a78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	e00c      	b.n	8004a9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	0013      	movs	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	189b      	adds	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <prvInitialiseTaskLists+0x68>)
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7fe fe56 	bl	8003744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b06      	cmp	r3, #6
 8004aa2:	d9ef      	bls.n	8004a84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <prvInitialiseTaskLists+0x6c>)
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7fe fe4c 	bl	8003744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aac:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <prvInitialiseTaskLists+0x70>)
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7fe fe48 	bl	8003744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <prvInitialiseTaskLists+0x74>)
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f7fe fe44 	bl	8003744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <prvInitialiseTaskLists+0x78>)
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7fe fe40 	bl	8003744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <prvInitialiseTaskLists+0x7c>)
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f7fe fe3c 	bl	8003744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <prvInitialiseTaskLists+0x80>)
 8004ace:	4a05      	ldr	r2, [pc, #20]	; (8004ae4 <prvInitialiseTaskLists+0x6c>)
 8004ad0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <prvInitialiseTaskLists+0x84>)
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <prvInitialiseTaskLists+0x70>)
 8004ad6:	601a      	str	r2, [r3, #0]
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000294 	.word	0x20000294
 8004ae4:	20000320 	.word	0x20000320
 8004ae8:	20000334 	.word	0x20000334
 8004aec:	20000350 	.word	0x20000350
 8004af0:	20000364 	.word	0x20000364
 8004af4:	2000037c 	.word	0x2000037c
 8004af8:	20000348 	.word	0x20000348
 8004afc:	2000034c 	.word	0x2000034c

08004b00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b06:	e01a      	b.n	8004b3e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004b08:	f000 faca 	bl	80050a0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <prvCheckTasksWaitingTermination+0x50>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fe fe94 	bl	8003846 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <prvCheckTasksWaitingTermination+0x54>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	1e5a      	subs	r2, r3, #1
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <prvCheckTasksWaitingTermination+0x54>)
 8004b26:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <prvCheckTasksWaitingTermination+0x58>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	1e5a      	subs	r2, r3, #1
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <prvCheckTasksWaitingTermination+0x58>)
 8004b30:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004b32:	f000 fac7 	bl	80050c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 f80f 	bl	8004b5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <prvCheckTasksWaitingTermination+0x58>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e0      	bne.n	8004b08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b002      	add	sp, #8
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	20000364 	.word	0x20000364
 8004b54:	20000390 	.word	0x20000390
 8004b58:	20000378 	.word	0x20000378

08004b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2251      	movs	r2, #81	; 0x51
 8004b68:	5c9b      	ldrb	r3, [r3, r2]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	0018      	movs	r0, r3
 8004b74:	f000 fbd2 	bl	800531c <vPortFree>
				vPortFree( pxTCB );
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f000 fbce 	bl	800531c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b80:	e010      	b.n	8004ba4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2251      	movs	r2, #81	; 0x51
 8004b86:	5c9b      	ldrb	r3, [r3, r2]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d104      	bne.n	8004b96 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 fbc4 	bl	800531c <vPortFree>
	}
 8004b94:	e006      	b.n	8004ba4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2251      	movs	r2, #81	; 0x51
 8004b9a:	5c9b      	ldrb	r3, [r3, r2]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d001      	beq.n	8004ba4 <prvDeleteTCB+0x48>
 8004ba0:	b672      	cpsid	i
 8004ba2:	e7fe      	b.n	8004ba2 <prvDeleteTCB+0x46>
	}
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}

08004bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <prvResetNextTaskUnblockTime+0x40>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <prvResetNextTaskUnblockTime+0x14>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <prvResetNextTaskUnblockTime+0x16>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvResetNextTaskUnblockTime+0x44>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4252      	negs	r2, r2
 8004bcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bce:	e008      	b.n	8004be2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <prvResetNextTaskUnblockTime+0x40>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <prvResetNextTaskUnblockTime+0x44>)
 8004be0:	601a      	str	r2, [r3, #0]
}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	20000348 	.word	0x20000348
 8004bf0:	200003b0 	.word	0x200003b0

08004bf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <xTaskGetSchedulerState+0x30>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c02:	2301      	movs	r3, #1
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	e008      	b.n	8004c1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <xTaskGetSchedulerState+0x34>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c10:	2302      	movs	r3, #2
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	e001      	b.n	8004c1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c16:	2300      	movs	r3, #0
 8004c18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c1a:	687b      	ldr	r3, [r7, #4]
	}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	2000039c 	.word	0x2000039c
 8004c28:	200003b8 	.word	0x200003b8

08004c2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d056      	beq.n	8004cf0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c46:	4b2d      	ldr	r3, [pc, #180]	; (8004cfc <xTaskPriorityInherit+0xd0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d246      	bcs.n	8004cde <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	db06      	blt.n	8004c66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c58:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <xTaskPriorityInherit+0xd0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	2207      	movs	r2, #7
 8004c60:	1ad2      	subs	r2, r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6959      	ldr	r1, [r3, #20]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	0013      	movs	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <xTaskPriorityInherit+0xd4>)
 8004c78:	189b      	adds	r3, r3, r2
 8004c7a:	4299      	cmp	r1, r3
 8004c7c:	d101      	bne.n	8004c82 <xTaskPriorityInherit+0x56>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xTaskPriorityInherit+0x58>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fe fdda 	bl	8003846 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c92:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <xTaskPriorityInherit+0xd0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <xTaskPriorityInherit+0xd8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d903      	bls.n	8004cb0 <xTaskPriorityInherit+0x84>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <xTaskPriorityInherit+0xd8>)
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <xTaskPriorityInherit+0xd4>)
 8004cbe:	189a      	adds	r2, r3, r2
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	0010      	movs	r0, r2
 8004cc8:	f7fe fd65 	bl	8003796 <vListInsertEnd>
 8004ccc:	e004      	b.n	8004cd8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <xTaskPriorityInherit+0xd0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e008      	b.n	8004cf0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <xTaskPriorityInherit+0xd0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d201      	bcs.n	8004cf0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004cec:	2301      	movs	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
	}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	20000290 	.word	0x20000290
 8004d00:	20000294 	.word	0x20000294
 8004d04:	20000398 	.word	0x20000398

08004d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d044      	beq.n	8004da8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d1e:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <xTaskPriorityDisinherit+0xac>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <xTaskPriorityDisinherit+0x24>
 8004d28:	b672      	cpsid	i
 8004d2a:	e7fe      	b.n	8004d2a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <xTaskPriorityDisinherit+0x30>
 8004d34:	b672      	cpsid	i
 8004d36:	e7fe      	b.n	8004d36 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	1e5a      	subs	r2, r3, #1
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d02c      	beq.n	8004da8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d128      	bne.n	8004da8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fe fd73 	bl	8003846 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <xTaskPriorityDisinherit+0xb0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d903      	bls.n	8004d88 <xTaskPriorityDisinherit+0x80>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <xTaskPriorityDisinherit+0xb0>)
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	0013      	movs	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	189b      	adds	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <xTaskPriorityDisinherit+0xb4>)
 8004d96:	189a      	adds	r2, r3, r2
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	0010      	movs	r0, r2
 8004da0:	f7fe fcf9 	bl	8003796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004da8:	68fb      	ldr	r3, [r7, #12]
	}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b004      	add	sp, #16
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	20000290 	.word	0x20000290
 8004db8:	20000398 	.word	0x20000398
 8004dbc:	20000294 	.word	0x20000294

08004dc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05d      	beq.n	8004e94 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8004de0:	b672      	cpsid	i
 8004de2:	e7fe      	b.n	8004de2 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d902      	bls.n	8004df4 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e002      	b.n	8004dfa <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d047      	beq.n	8004e94 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d142      	bne.n	8004e94 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e0e:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d101      	bne.n	8004e1c <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8004e18:	b672      	cpsid	i
 8004e1a:	e7fe      	b.n	8004e1a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	db04      	blt.n	8004e3a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2207      	movs	r2, #7
 8004e34:	1ad2      	subs	r2, r2, r3
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6959      	ldr	r1, [r3, #20]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	0013      	movs	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	189b      	adds	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	d101      	bne.n	8004e54 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01c      	beq.n	8004e94 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7fe fcf1 	bl	8003846 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d903      	bls.n	8004e78 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	0013      	movs	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	189b      	adds	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8004e86:	189a      	adds	r2, r3, r2
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	0010      	movs	r0, r2
 8004e90:	f7fe fc81 	bl	8003796 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b006      	add	sp, #24
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000290 	.word	0x20000290
 8004ea0:	20000294 	.word	0x20000294
 8004ea4:	20000398 	.word	0x20000398

08004ea8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <pvTaskIncrementMutexHeldCount+0x20>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <pvTaskIncrementMutexHeldCount+0x20>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eba:	3201      	adds	r2, #1
 8004ebc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004ebe:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <pvTaskIncrementMutexHeldCount+0x20>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
	}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000290 	.word	0x20000290

08004ecc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ed6:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f7fe fcaf 	bl	8003846 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3301      	adds	r3, #1
 8004eec:	d10b      	bne.n	8004f06 <prvAddCurrentTaskToDelayedList+0x3a>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	1d1a      	adds	r2, r3, #4
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <prvAddCurrentTaskToDelayedList+0x98>)
 8004efc:	0011      	movs	r1, r2
 8004efe:	0018      	movs	r0, r3
 8004f00:	f7fe fc49 	bl	8003796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f04:	e026      	b.n	8004f54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	18d3      	adds	r3, r2, r3
 8004f0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d209      	bcs.n	8004f32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3304      	adds	r3, #4
 8004f28:	0019      	movs	r1, r3
 8004f2a:	0010      	movs	r0, r2
 8004f2c:	f7fe fc55 	bl	80037da <vListInsert>
}
 8004f30:	e010      	b.n	8004f54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	0010      	movs	r0, r2
 8004f40:	f7fe fc4b 	bl	80037da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d202      	bcs.n	8004f54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	601a      	str	r2, [r3, #0]
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b004      	add	sp, #16
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000394 	.word	0x20000394
 8004f60:	20000290 	.word	0x20000290
 8004f64:	2000037c 	.word	0x2000037c
 8004f68:	2000034c 	.word	0x2000034c
 8004f6c:	20000348 	.word	0x20000348
 8004f70:	200003b0 	.word	0x200003b0

08004f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3b04      	subs	r3, #4
 8004f84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2280      	movs	r2, #128	; 0x80
 8004f8a:	0452      	lsls	r2, r2, #17
 8004f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b04      	subs	r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3b04      	subs	r3, #4
 8004f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <pxPortInitialiseStack+0x50>)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3b14      	subs	r3, #20
 8004faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3b20      	subs	r3, #32
 8004fb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	08004fc9 	.word	0x08004fc9

08004fc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <prvTaskExitError+0x28>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	d001      	beq.n	8004fde <prvTaskExitError+0x16>
 8004fda:	b672      	cpsid	i
 8004fdc:	e7fe      	b.n	8004fdc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004fde:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0fc      	beq.n	8004fe2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000014 	.word	0x20000014

08004ff4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004ff8:	46c0      	nop			; (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005000:	4a0b      	ldr	r2, [pc, #44]	; (8005030 <pxCurrentTCBConst2>)
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	3020      	adds	r0, #32
 8005008:	f380 8809 	msr	PSP, r0
 800500c:	2002      	movs	r0, #2
 800500e:	f380 8814 	msr	CONTROL, r0
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005018:	46ae      	mov	lr, r5
 800501a:	bc08      	pop	{r3}
 800501c:	bc04      	pop	{r2}
 800501e:	b662      	cpsie	i
 8005020:	4718      	bx	r3
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46c0      	nop			; (mov r8, r8)

08005030 <pxCurrentTCBConst2>:
 8005030:	20000290 	.word	0x20000290
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46c0      	nop			; (mov r8, r8)

08005038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <xPortStartScheduler+0x40>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <xPortStartScheduler+0x40>)
 8005042:	21ff      	movs	r1, #255	; 0xff
 8005044:	0409      	lsls	r1, r1, #16
 8005046:	430a      	orrs	r2, r1
 8005048:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800504a:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <xPortStartScheduler+0x40>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <xPortStartScheduler+0x40>)
 8005050:	21ff      	movs	r1, #255	; 0xff
 8005052:	0609      	lsls	r1, r1, #24
 8005054:	430a      	orrs	r2, r1
 8005056:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005058:	f000 f898 	bl	800518c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <xPortStartScheduler+0x44>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005062:	f7ff ffcd 	bl	8005000 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005066:	f7ff fbc3 	bl	80047f0 <vTaskSwitchContext>
	prvTaskExitError();
 800506a:	f7ff ffad 	bl	8004fc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800506e:	2300      	movs	r3, #0
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	e000ed20 	.word	0xe000ed20
 800507c:	20000014 	.word	0x20000014

08005080 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <vPortYield+0x1c>)
 8005086:	2280      	movs	r2, #128	; 0x80
 8005088:	0552      	lsls	r2, r2, #21
 800508a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800508c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005090:	f3bf 8f6f 	isb	sy
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80050a4:	b672      	cpsid	i
    uxCriticalNesting++;
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <vPortEnterCritical+0x20>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <vPortEnterCritical+0x20>)
 80050ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80050b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80050b4:	f3bf 8f6f 	isb	sy
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	20000014 	.word	0x20000014

080050c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <vPortExitCritical+0x2c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <vPortExitCritical+0x10>
 80050d0:	b672      	cpsid	i
 80050d2:	e7fe      	b.n	80050d2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <vPortExitCritical+0x2c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <vPortExitCritical+0x2c>)
 80050dc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80050de:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <vPortExitCritical+0x2c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d100      	bne.n	80050e8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80050e6:	b662      	cpsie	i
    }
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	20000014 	.word	0x20000014

080050f4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80050f4:	f3ef 8010 	mrs	r0, PRIMASK
 80050f8:	b672      	cpsid	i
 80050fa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	0018      	movs	r0, r3

08005100 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005100:	f380 8810 	msr	PRIMASK, r0
 8005104:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005106:	46c0      	nop			; (mov r8, r8)
	...

08005110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005110:	f3ef 8009 	mrs	r0, PSP
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <pxCurrentTCBConst>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	3820      	subs	r0, #32
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800511e:	4644      	mov	r4, r8
 8005120:	464d      	mov	r5, r9
 8005122:	4656      	mov	r6, sl
 8005124:	465f      	mov	r7, fp
 8005126:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005128:	b508      	push	{r3, lr}
 800512a:	b672      	cpsid	i
 800512c:	f7ff fb60 	bl	80047f0 <vTaskSwitchContext>
 8005130:	b662      	cpsie	i
 8005132:	bc0c      	pop	{r2, r3}
 8005134:	6811      	ldr	r1, [r2, #0]
 8005136:	6808      	ldr	r0, [r1, #0]
 8005138:	3010      	adds	r0, #16
 800513a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800513c:	46a0      	mov	r8, r4
 800513e:	46a9      	mov	r9, r5
 8005140:	46b2      	mov	sl, r6
 8005142:	46bb      	mov	fp, r7
 8005144:	f380 8809 	msr	PSP, r0
 8005148:	3820      	subs	r0, #32
 800514a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800514c:	4718      	bx	r3
 800514e:	46c0      	nop			; (mov r8, r8)

08005150 <pxCurrentTCBConst>:
 8005150:	20000290 	.word	0x20000290
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	46c0      	nop			; (mov r8, r8)

08005158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800515e:	f7ff ffc9 	bl	80050f4 <ulSetInterruptMaskFromISR>
 8005162:	0003      	movs	r3, r0
 8005164:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005166:	f7ff faaf 	bl	80046c8 <xTaskIncrementTick>
 800516a:	1e03      	subs	r3, r0, #0
 800516c:	d003      	beq.n	8005176 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <xPortSysTickHandler+0x30>)
 8005170:	2280      	movs	r2, #128	; 0x80
 8005172:	0552      	lsls	r2, r2, #21
 8005174:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0018      	movs	r0, r3
 800517a:	f7ff ffc1 	bl	8005100 <vClearInterruptMaskFromISR>
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	b002      	add	sp, #8
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <prvSetupTimerInterrupt+0x34>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <prvSetupTimerInterrupt+0x38>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <prvSetupTimerInterrupt+0x3c>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	23fa      	movs	r3, #250	; 0xfa
 80051a2:	0099      	lsls	r1, r3, #2
 80051a4:	0010      	movs	r0, r2
 80051a6:	f7fa ffaf 	bl	8000108 <__udivsi3>
 80051aa:	0003      	movs	r3, r0
 80051ac:	001a      	movs	r2, r3
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <prvSetupTimerInterrupt+0x40>)
 80051b0:	3a01      	subs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80051b4:	4b02      	ldr	r3, [pc, #8]	; (80051c0 <prvSetupTimerInterrupt+0x34>)
 80051b6:	2207      	movs	r2, #7
 80051b8:	601a      	str	r2, [r3, #0]
}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	e000e010 	.word	0xe000e010
 80051c4:	e000e018 	.word	0xe000e018
 80051c8:	20000008 	.word	0x20000008
 80051cc:	e000e014 	.word	0xe000e014

080051d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80051dc:	f7ff f9e2 	bl	80045a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051e0:	4b49      	ldr	r3, [pc, #292]	; (8005308 <pvPortMalloc+0x138>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051e8:	f000 f8e0 	bl	80053ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051ec:	4b47      	ldr	r3, [pc, #284]	; (800530c <pvPortMalloc+0x13c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4013      	ands	r3, r2
 80051f4:	d000      	beq.n	80051f8 <pvPortMalloc+0x28>
 80051f6:	e079      	b.n	80052ec <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d012      	beq.n	8005224 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80051fe:	2208      	movs	r2, #8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	189b      	adds	r3, r3, r2
 8005204:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2207      	movs	r2, #7
 800520a:	4013      	ands	r3, r2
 800520c:	d00a      	beq.n	8005224 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2207      	movs	r2, #7
 8005212:	4393      	bics	r3, r2
 8005214:	3308      	adds	r3, #8
 8005216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2207      	movs	r2, #7
 800521c:	4013      	ands	r3, r2
 800521e:	d001      	beq.n	8005224 <pvPortMalloc+0x54>
 8005220:	b672      	cpsid	i
 8005222:	e7fe      	b.n	8005222 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d060      	beq.n	80052ec <pvPortMalloc+0x11c>
 800522a:	4b39      	ldr	r3, [pc, #228]	; (8005310 <pvPortMalloc+0x140>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d85b      	bhi.n	80052ec <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005234:	4b37      	ldr	r3, [pc, #220]	; (8005314 <pvPortMalloc+0x144>)
 8005236:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005238:	4b36      	ldr	r3, [pc, #216]	; (8005314 <pvPortMalloc+0x144>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800523e:	e004      	b.n	800524a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d903      	bls.n	800525c <pvPortMalloc+0x8c>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f1      	bne.n	8005240 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800525c:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <pvPortMalloc+0x138>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	429a      	cmp	r2, r3
 8005264:	d042      	beq.n	80052ec <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2208      	movs	r2, #8
 800526c:	189b      	adds	r3, r3, r2
 800526e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad2      	subs	r2, r2, r3
 8005280:	2308      	movs	r3, #8
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	429a      	cmp	r2, r3
 8005286:	d916      	bls.n	80052b6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2207      	movs	r2, #7
 8005294:	4013      	ands	r3, r2
 8005296:	d001      	beq.n	800529c <pvPortMalloc+0xcc>
 8005298:	b672      	cpsid	i
 800529a:	e7fe      	b.n	800529a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	1ad2      	subs	r2, r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 f8db 	bl	800546c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <pvPortMalloc+0x140>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	4b13      	ldr	r3, [pc, #76]	; (8005310 <pvPortMalloc+0x140>)
 80052c2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052c4:	4b12      	ldr	r3, [pc, #72]	; (8005310 <pvPortMalloc+0x140>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b13      	ldr	r3, [pc, #76]	; (8005318 <pvPortMalloc+0x148>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d203      	bcs.n	80052d8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <pvPortMalloc+0x140>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <pvPortMalloc+0x148>)
 80052d6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <pvPortMalloc+0x13c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052ec:	f7ff f966 	bl	80045bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2207      	movs	r2, #7
 80052f4:	4013      	ands	r3, r2
 80052f6:	d001      	beq.n	80052fc <pvPortMalloc+0x12c>
 80052f8:	b672      	cpsid	i
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x12a>
	return pvReturn;
 80052fc:	68fb      	ldr	r3, [r7, #12]
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b006      	add	sp, #24
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	20000fc4 	.word	0x20000fc4
 800530c:	20000fd0 	.word	0x20000fd0
 8005310:	20000fc8 	.word	0x20000fc8
 8005314:	20000fbc 	.word	0x20000fbc
 8005318:	20000fcc 	.word	0x20000fcc

0800531c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d035      	beq.n	800539a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800532e:	2308      	movs	r3, #8
 8005330:	425b      	negs	r3, r3
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	18d3      	adds	r3, r2, r3
 8005336:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	4b18      	ldr	r3, [pc, #96]	; (80053a4 <vPortFree+0x88>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4013      	ands	r3, r2
 8005346:	d101      	bne.n	800534c <vPortFree+0x30>
 8005348:	b672      	cpsid	i
 800534a:	e7fe      	b.n	800534a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <vPortFree+0x3c>
 8005354:	b672      	cpsid	i
 8005356:	e7fe      	b.n	8005356 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <vPortFree+0x88>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4013      	ands	r3, r2
 8005362:	d01a      	beq.n	800539a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d116      	bne.n	800539a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <vPortFree+0x88>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	43db      	mvns	r3, r3
 8005376:	401a      	ands	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800537c:	f7ff f912 	bl	80045a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <vPortFree+0x8c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	18d2      	adds	r2, r2, r3
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <vPortFree+0x8c>)
 800538c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	0018      	movs	r0, r3
 8005392:	f000 f86b 	bl	800546c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005396:	f7ff f911 	bl	80045bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b004      	add	sp, #16
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	20000fd0 	.word	0x20000fd0
 80053a8:	20000fc8 	.word	0x20000fc8

080053ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053b2:	23c0      	movs	r3, #192	; 0xc0
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053b8:	4b26      	ldr	r3, [pc, #152]	; (8005454 <prvHeapInit+0xa8>)
 80053ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2207      	movs	r2, #7
 80053c0:	4013      	ands	r3, r2
 80053c2:	d00c      	beq.n	80053de <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3307      	adds	r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2207      	movs	r2, #7
 80053ce:	4393      	bics	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	4b1e      	ldr	r3, [pc, #120]	; (8005454 <prvHeapInit+0xa8>)
 80053da:	18d3      	adds	r3, r2, r3
 80053dc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053e2:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <prvHeapInit+0xac>)
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <prvHeapInit+0xac>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	18d3      	adds	r3, r2, r3
 80053f4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053f6:	2208      	movs	r2, #8
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2207      	movs	r2, #7
 8005402:	4393      	bics	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <prvHeapInit+0xb0>)
 800540a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800540c:	4b13      	ldr	r3, [pc, #76]	; (800545c <prvHeapInit+0xb0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005414:	4b11      	ldr	r3, [pc, #68]	; (800545c <prvHeapInit+0xb0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <prvHeapInit+0xb0>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <prvHeapInit+0xb4>)
 8005438:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <prvHeapInit+0xb8>)
 8005440:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <prvHeapInit+0xbc>)
 8005444:	2280      	movs	r2, #128	; 0x80
 8005446:	0612      	lsls	r2, r2, #24
 8005448:	601a      	str	r2, [r3, #0]
}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	200003bc 	.word	0x200003bc
 8005458:	20000fbc 	.word	0x20000fbc
 800545c:	20000fc4 	.word	0x20000fc4
 8005460:	20000fcc 	.word	0x20000fcc
 8005464:	20000fc8 	.word	0x20000fc8
 8005468:	20000fd0 	.word	0x20000fd0

0800546c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005474:	4b27      	ldr	r3, [pc, #156]	; (8005514 <prvInsertBlockIntoFreeList+0xa8>)
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e002      	b.n	8005480 <prvInsertBlockIntoFreeList+0x14>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d8f7      	bhi.n	800547a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	18d3      	adds	r3, r2, r3
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	429a      	cmp	r2, r3
 800549a:	d108      	bne.n	80054ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	18d2      	adds	r2, r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	18d2      	adds	r2, r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d118      	bne.n	80054f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <prvInsertBlockIntoFreeList+0xac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d00d      	beq.n	80054ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	18d2      	adds	r2, r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	e008      	b.n	80054fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <prvInsertBlockIntoFreeList+0xac>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e003      	b.n	80054fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d002      	beq.n	800550a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b004      	add	sp, #16
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	20000fbc 	.word	0x20000fbc
 8005518:	20000fc4 	.word	0x20000fc4

0800551c <__libc_init_array>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	2600      	movs	r6, #0
 8005520:	4d0c      	ldr	r5, [pc, #48]	; (8005554 <__libc_init_array+0x38>)
 8005522:	4c0d      	ldr	r4, [pc, #52]	; (8005558 <__libc_init_array+0x3c>)
 8005524:	1b64      	subs	r4, r4, r5
 8005526:	10a4      	asrs	r4, r4, #2
 8005528:	42a6      	cmp	r6, r4
 800552a:	d109      	bne.n	8005540 <__libc_init_array+0x24>
 800552c:	2600      	movs	r6, #0
 800552e:	f000 f82b 	bl	8005588 <_init>
 8005532:	4d0a      	ldr	r5, [pc, #40]	; (800555c <__libc_init_array+0x40>)
 8005534:	4c0a      	ldr	r4, [pc, #40]	; (8005560 <__libc_init_array+0x44>)
 8005536:	1b64      	subs	r4, r4, r5
 8005538:	10a4      	asrs	r4, r4, #2
 800553a:	42a6      	cmp	r6, r4
 800553c:	d105      	bne.n	800554a <__libc_init_array+0x2e>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	00b3      	lsls	r3, r6, #2
 8005542:	58eb      	ldr	r3, [r5, r3]
 8005544:	4798      	blx	r3
 8005546:	3601      	adds	r6, #1
 8005548:	e7ee      	b.n	8005528 <__libc_init_array+0xc>
 800554a:	00b3      	lsls	r3, r6, #2
 800554c:	58eb      	ldr	r3, [r5, r3]
 800554e:	4798      	blx	r3
 8005550:	3601      	adds	r6, #1
 8005552:	e7f2      	b.n	800553a <__libc_init_array+0x1e>
 8005554:	08005620 	.word	0x08005620
 8005558:	08005620 	.word	0x08005620
 800555c:	08005620 	.word	0x08005620
 8005560:	08005624 	.word	0x08005624

08005564 <memcpy>:
 8005564:	2300      	movs	r3, #0
 8005566:	b510      	push	{r4, lr}
 8005568:	429a      	cmp	r2, r3
 800556a:	d100      	bne.n	800556e <memcpy+0xa>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	5ccc      	ldrb	r4, [r1, r3]
 8005570:	54c4      	strb	r4, [r0, r3]
 8005572:	3301      	adds	r3, #1
 8005574:	e7f8      	b.n	8005568 <memcpy+0x4>

08005576 <memset>:
 8005576:	0003      	movs	r3, r0
 8005578:	1812      	adds	r2, r2, r0
 800557a:	4293      	cmp	r3, r2
 800557c:	d100      	bne.n	8005580 <memset+0xa>
 800557e:	4770      	bx	lr
 8005580:	7019      	strb	r1, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	e7f9      	b.n	800557a <memset+0x4>
	...

08005588 <_init>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr

08005594 <_fini>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559a:	bc08      	pop	{r3}
 800559c:	469e      	mov	lr, r3
 800559e:	4770      	bx	lr
